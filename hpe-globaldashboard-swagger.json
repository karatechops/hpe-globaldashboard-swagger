{
  "swagger": "2.0",
  "basePath": "/rest",
  "info": {
    "title": "HPE OneView Global Dashboard REST API",
    "version": "2",
    "description": "Product version 1.60.02"
  },
  "tags": [
    {
      "name": "Appliances",
      "description": "Operations on appliances"
    },
    {
      "name": "Certificates",
      "description": "Operations on certificates"
    },
    {
      "name": "Converged Systems",
      "description": "Operations on converged systems"
    },
    {
      "name": "Enclosures",
      "description": "Operations on enclosures"
    },
    {
      "name": "Groups",
      "description": "Operations on groups"
    },
    {
      "name": "Login Sessions",
      "description": "Operations on login sessions"
    },
    {
      "name": "Managed SANs",
      "description": "Operations on managed SANs"
    },
    {
      "name": "Network Interfaces",
      "description": "Operations on network interfaces"
    },
    {
      "name": "Resource Alerts",
      "description": "Operations on resource alerts"
    },
    {
      "name": "SAN Managers",
      "description": "Operations on SAN Managers"
    },
    {
      "name": "Server Firmware",
      "description": "Operations on server firmware"
    },
    {
      "name": "Server Hardware",
      "description": "Operations on server hardware"
    },
    {
      "name": "Server Profiles",
      "description": "Operations on server profiles"
    },
    {
      "name": "Server Profile Templates",
      "description": "Operations on server profile templates"
    },
    {
      "name": "Storage Pools",
      "description": "Operations on storage pools"
    },
    {
      "name": "Storage Systems",
      "description": "Operations on storage systems"
    },
    {
      "name": "Storage Volumes",
      "description": "Operations on storage volumes"
    },
    {
      "name": "Tasks",
      "description": "Operations on tasks"
    }
  ],
  "paths": {
    "/rest/resource-alerts": {
      "get": {
        "summary": "Returns a list of resource alerts",
        "description": "Returns a list of critical resource alerts by query as either JSON or comma-separated values (CSV).\n\nThere is a default filter with this API that returns only critical alerts.\n\nThe table below gives an overview of the uses of the resource alerts API.\n\n| Description                                 | Method | Content Type     | Produces |\n| -----------                                 | ------ | -----            | ----     |\n| Get a list of resource alerts               | GET    | application/json | JSON     |\n| Get a list of resource alerts in CSV format | GET    | text/csv         | CSV      |\n",
        "tags": [
          "Resource Alerts"
        ],
        "consumes": [
          "application/json or text/csv"
        ],
        "produces": [
          "application/json or text/csv"
        ],
        "parameters": [
          {
            "name": "content-type",
            "description": "The data format requested for the response body.",
            "in": "header",
            "required": true,
            "type": "string",
            "enum": [
              "application/json",
              "text/csv"
            ]
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "alerts"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/resource-alerts/{id}": {
      "get": {
        "summary": "Returns a resource alert",
        "description": "Returns an existing resource alert identified by its unique ID.",
        "tags": [
          "Resource Alerts"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of alert.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "activityUri": {
                  "type": "string",
                  "description": "URI of the task resource of the activity that created the alert, if the alert was caused by an operation in the appliance. Used in tracking root causes."
                },
                "alertState": {
                  "type": "string",
                  "description": "This indicates the state of an alert. Active alerts of a resource help determine its health status. Cleared alerts indicate that the alerts are no longer of concern and will not affect the health status of a resource. Locked alerts are active alerts that cannot be cleared or deleted by the user. Only the internal resource manager can change the state of the locked alert after the underlying problem is corrected. Like active alerts, locked alerts help determine the health status of a resource. The system will automatically set the state of an alert to Cleared if the severity of the alert is OK.",
                  "enum": [
                    "Active",
                    "Cleared",
                    "Locked"
                  ]
                },
                "alertTypeID": {
                  "type": "string",
                  "description": "Uniquely identifies the type of the alert resource. Typically this is an identifier for which the alert resource is created. For example - an alert type of Trap.cpqHo2NicStatusFailed indicates a trap where the NIC was in a failed condition. The alertTypeID is the same as the eventTypeID of the event(s) from which the alert is created."
                },
                "applianceLocation": {
                  "type": "string",
                  "description": "Location of the appliance."
                },
                "applianceModel": {
                  "type": "string",
                  "description": "Model of the appliance."
                },
                "applianceName": {
                  "type": "string",
                  "description": "Name of the appliance."
                },
                "applianceVersion": {
                  "type": "string",
                  "description": "Version of the appliance."
                },
                "appluri": {
                  "type": "string",
                  "description": "URI of the appliance."
                },
                "assignedToUser": {
                  "type": "string",
                  "description": "The user assigned to this alert."
                },
                "associatedEventUris": {
                  "type": "array",
                  "description": "List of event resource URIs that are associated with this alert. An event can be associated with only one alert, while an alert might have one or more related events associated with it.",
                  "items": {
                    "type": "string"
                  }
                },
                "associatedResource": {
                  "type": "object",
                  "description": "Details about the resource for which the alert is created. The resource can be an enclosure, server, or any other managed resource. For example, if the alert is created for an enclosure, the associatedResource has the details about that enclosure.",
                  "properties": {
                    "resourceUri": {
                      "type": "string",
                      "description": "URI of the resource associated with the task."
                    },
                    "resourceCategory": {
                      "type": "string",
                      "description": "Category of the resource associated with the task (for example 'enclosures'), not necessarily the RM performing the task."
                    },
                    "resourceName": {
                      "type": "string",
                      "description": "Display name of the resource associated with the task."
                    },
                    "associationType": {
                      "type": "string",
                      "description": "Type of association. In general, Task uses MANAGED_BY associationType, as task is managed by some resource.",
                      "enum": [
                        "HAS_A",
                        "IS_A",
                        "MANAGED_BY"
                      ]
                    }
                  }
                },
                "associatedResourceName": {
                  "type": "string",
                  "description": "Name of the associated resource."
                },
                "associatedResourceOriginalUri": {
                  "type": "string",
                  "description": "Original URI of the associated resource."
                },
                "category": {
                  "type": "string",
                  "description": "The category helps to identify the kind of resource. The category of this resource will always be set to 'alerts'.",
                  "enum": [
                    "alerts"
                  ]
                },
                "changeLog": {
                  "type": "array",
                  "description": "Time-stamped log of the alert, within a certain time frame. Includes state changes, system-generated notes such as 'Alert cleared at 10:04am', and user-added notes. The user can delete only user-added notes.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "created": {
                        "type": "string",
                        "description": "Creation time of the log entry, when the alert resource changed. Formatted as an ISO 8601 formatted string."
                      },
                      "notes": {
                        "type": "string",
                        "description": "User-added notes regarding the alert resource."
                      },
                      "uri": {
                        "type": "string",
                        "description": "Contains the fully identified alert URI."
                      },
                      "userEntered": {
                        "type": "boolean",
                        "description": "Flag for user-added notes versus other changes. True, if the change is a user-added note."
                      },
                      "username": {
                        "type": "string",
                        "description": "The name of the user who made the change related to this log entry."
                      }
                    }
                  }
                },
                "clearedByUser": {
                  "type": "string",
                  "description": "The name of the user who last set the alert state to Cleared. Alerts can be cleared by the user or by the system. For example, when an event is posted with the clearPriorEvents attribute set to true, the events resource manager clears the alert."
                },
                "clearedTime": {
                  "type": "string",
                  "description": "The time when the alert was cleared."
                },
                "correctiveAction": {
                  "type": "string",
                  "description": "A description of corrective action to address the underlying problem."
                },
                "created": {
                  "type": "string",
                  "description": "The time that the alert resource was created and stored; the format is an extended ISO 8601 String expressed as UTC."
                },
                "description": {
                  "type": "string",
                  "description": "The description provides a quick summary of the issue for which the alert is created."
                },
                "eTag": {
                  "type": "string",
                  "description": "Entity tag/version ID of the resource, the same value that is returned in the ETag header on a GET of the resource"
                },
                "healthCategory": {
                  "type": "string",
                  "description": "Hardware/software category used to help group the categories for this alert. Valid values are - Appliance, DeviceBay, Enclosure, Fan, Firmware, Host, Instance, InterconnectBay, LogicalSwitch, Logs, ManagementProcessor, Memory, Network, None, Operational, Power, Processor, RemoteSupport, Storage, Thermal, Unknown."
                },
                "id": {
                  "type": "string",
                  "description": "Unique identification."
                },
                "lifeCycle": {
                  "type": "boolean",
                  "description": "Life cycle alerts do not determine status of a resource. Life cycle alerts are created as a result of some activity on a resource such as powering on or off a server or inserting a blade server in an enclosure. If the severity of a life cycle alert is not set to OK, the system will automatically set the severity of a life cycle alert to OK."
                },
                "modified": {
                  "type": "string",
                  "description": "The time that the alert resource was last modified and stored; the format is an extended ISO 8601 String expressed as UTC."
                },
                "originalUri": {
                  "type": "string",
                  "description": "The original URI of the resource."
                },
                "physicalResourceType": {
                  "type": "string",
                  "description": "The type of the resource for which this alert is associated with. That is, enclosures, physical_servers, etc."
                },
                "resourceID": {
                  "type": "string",
                  "description": "A unique identifier, specific path, or attribute identifying a component within the resource for which the alert is created. For example, in a server with a Mezzanine card, physical port, physical function the resourceID might be represented as adapter/1/ports/2/function/4a."
                },
                "resourceUri": {
                  "type": "string",
                  "description": "URI of the resource. This will be same as the resourceUri defined in AssociatedResource object."
                },
                "serviceEventDetails": {
                  "type": "object",
                  "description": "This is used to capture the details of alert generated out of a Service Event such as caseId, partNumber, primaryContact, remoteSupportState",
                  "properties": {
                    "caseId": {
                      "type": "string",
                      "description": "Holds the Service Case ID."
                    },
                    "primaryContact": {
                      "type": "string",
                      "description": "Holds the contact details."
                    },
                    "remoteSupportState": {
                      "type": "string",
                      "description": "State of Request, like Submitted, Open, and so on.",
                      "enum": [
                        "Closed",
                        "Error",
                        "None",
                        "Open",
                        "Pending",
                        "Received",
                        "Submitted"
                      ]
                    }
                  }
                },
                "serviceEventSource": {
                  "type": "boolean",
                  "description": "This indicates a Service event."
                },
                "severity": {
                  "type": "string",
                  "description": "The severity of the alert",
                  "enum": [
                    "Critical",
                    "Disabled",
                    "OK",
                    "Unknown",
                    "Warning"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "General status."
                },
                "type": {
                  "type": "string",
                  "description": "Uniquely identifies the type of the JSON object"
                },
                "urgency": {
                  "type": "string",
                  "description": "You can assign a priority for addressing the problem associated with the alert by setting the Urgency. The default is None.",
                  "enum": [
                    "None",
                    "Deferrable",
                    "Medium",
                    "High",
                    "Immediate",
                    "Unknown"
                  ]
                },
                "uri": {
                  "type": "string",
                  "description": "Contains the fully identified alert URI."
                }
              },
              "example": {
                "type": "AlertResourceV3",
                "serviceEventSource": false,
                "serviceEventDetails": null,
                "resourceUri": "/rest/system/1",
                "associatedResource": {
                  "resourceUri": "/rest/system/1",
                  "resourceCategory": "system",
                  "resourceName": "system",
                  "associationType": "HAS_A"
                },
                "alertState": "Active",
                "physicalResourceType": "system",
                "severity": "Critical",
                "eTag": "2016-05-05T17:01:41.038Z",
                "created": "2016-04-25T23:29:55.880Z",
                "modified": "2016-05-05T17:01:41.038Z",
                "alertTypeID": "System.ILO import/delete 172.30.0.4",
                "lifeCycle": false,
                "activityUri": null,
                "resourceID": null,
                "associatedEventUris": [
                  "/rest/events/145"
                ],
                "assignedToUser": null,
                "changeLog": [
                  {
                    "created": "2016-05-05T17:01:41.021Z",
                    "username": "Administrator",
                    "notes": "Alert Restored.",
                    "userEntered": false,
                    "uri": "/rest/resource-alerts/AlertChangeLog/13869"
                  },
                  {
                    "created": "2016-05-05T17:01:37.808Z",
                    "username": "Administrator",
                    "notes": "Alert cleared.",
                    "userEntered": false,
                    "uri": "/rest/resource-alerts/AlertChangeLog/13868"
                  },
                  {
                    "created": "2016-05-03T14:21:55.077Z",
                    "username": "Administrator",
                    "notes": "Alert Restored.",
                    "userEntered": false,
                    "uri": "/rest/resource-alerts/AlertChangeLog/13867"
                  },
                  {
                    "created": "2016-05-03T14:21:40.065Z",
                    "username": "Administrator",
                    "notes": "Alert cleared.",
                    "userEntered": false,
                    "uri": "/rest/resource-alerts/AlertChangeLog/13866"
                  }
                ],
                "clearedByUser": null,
                "clearedTime": null,
                "correctiveAction": null,
                "healthCategory": "system",
                "urgency": "Medium",
                "category": "alerts",
                "description": "ILO Server(172.30.0.4) import failed.Unable to communicate with '172.30.0.4'.",
                "uri": "/rest/resource-alerts/d3979362-fd19-4f9f-a08c-97d7bfda982c",
                "id": "d3979362-fd19-4f9f-a08c-97d7bfda982c",
                "originalUri": "/rest/alerts/143",
                "status": "Unknown",
                "appluri": "/rest/appliances/5ceb81d9-3bb8-406e-9d7f-16075032f67d",
                "applianceName": "ci-005056b3524e",
                "applianceLocation": "172.1.1.67",
                "associatedResourceName": "system",
                "associatedResourceOriginalUri": "/rest/system/1",
                "applianceModel": "HPE HC380",
                "applianceVersion": "1.00.01-0244671"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/appliances": {
      "post": {
        "summary": "Add appliance",
        "description": "Add a new appliance into Global Dashboard.\n\nThe table below gives an overview of the process for adding an appliance.\n\n| Description                            | Method | Path                                      |\n| -----------                            | ------ | -----                                     |\n| Get certificates from remote appliance | GET    | /rest/certificates/https/remote/{address} |\n| Store certificates                     | POST   | /rest/certificates/servers                |\n| Add appliance                          | POST   | /rest/appliances                   |\n",
        "tags": [
          "Appliances"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1groups~1/post/parameters/2"
          },
          {
            "name": "appliance",
            "description": "A valid appliance JSON object.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "description": "Category of the resource."
                },
                "loginDomain": {
                  "type": "string",
                  "description": "Login domain."
                },
                "address": {
                  "type": "string",
                  "description": "Appliance address."
                },
                "username": {
                  "type": "string",
                  "description": "Appliance username."
                },
                "password": {
                  "type": "string",
                  "description": "Appliance password."
                },
                "applianceName": {
                  "type": "string",
                  "description": "Appliance alias."
                }
              },
              "required": [
                "loginDomain",
                "address",
                "username",
                "password"
              ],
              "example": {
                "category": "appliances",
                "loginDomain": "local",
                "address": "192.168.0.1",
                "username": "sarah",
                "password": "secret",
                "applianceName": "appliance1"
              }
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The absolute URI of a task created to perform the requested action."
              }
            },
            "schema": {
              "type": "object",
              "properties": {
                "applianceLocation": {
                  "type": "string",
                  "description": "Appliance IP."
                },
                "applianceName": {
                  "type": "string",
                  "description": "Appliance name."
                },
                "applianceUri": {
                  "type": "string",
                  "description": "Appliance original URI."
                },
                "category": {
                  "type": "string",
                  "description": "Resource category.",
                  "enum": [
                    "appliances"
                  ]
                },
                "created": {
                  "type": "string",
                  "description": "Date and time when the appliance was created."
                },
                "currentApiVersion": {
                  "type": "integer",
                  "description": "Appliance API version used to get data."
                },
                "description": {
                  "type": "string",
                  "description": "The description of the appliance."
                },
                "eTag": {
                  "type": "string",
                  "description": "Entity tag/version ID of the appliance."
                },
                "groups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the group."
                      },
                      "uri": {
                        "type": "string",
                        "description": "URI of the group."
                      }
                    }
                  },
                  "description": "Logical groups this resource belongs to."
                },
                "hostname": {
                  "type": "string",
                  "description": "Appliance hostname."
                },
                "id": {
                  "type": "string",
                  "description": "Unique appliance identification."
                },
                "loginDomain": {
                  "type": "string",
                  "description": "Domain for user accounts."
                },
                "model": {
                  "type": "string",
                  "description": "Appliance model."
                },
                "moduleName": {
                  "type": "string",
                  "description": "Module name of the appliance."
                },
                "modified": {
                  "type": "string",
                  "description": "Last modification time."
                },
                "name": {
                  "type": "string",
                  "description": "Appliance alias."
                },
                "serialNumber": {
                  "type": "string",
                  "description": "Appliance serial number."
                },
                "state": {
                  "type": "string",
                  "description": "Appliance state.",
                  "enum": [
                    "Adding",
                    "Refreshing",
                    "Deleting",
                    "Online",
                    "Offline",
                    "Failed"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Appliance status.",
                  "enum": [
                    "OK",
                    "Critical"
                  ]
                },
                "type": {
                  "type": "string",
                  "description": "Appliance model version."
                },
                "uri": {
                  "type": "string",
                  "description": "Appliance URI in global dashboard."
                },
                "username": {
                  "type": "string",
                  "description": "Username used when adding the appliance."
                },
                "version": {
                  "type": "string",
                  "description": "Appliance version."
                }
              },
              "example": {
                "applianceLocation": "172.1.1.62",
                "applianceName": "ci-005056b343ec",
                "applianceUri": "/rest/appliances/d47e3b46-f28e-4f8f-9c86-811c9b117c6d",
                "category": "appliances",
                "created": "2017-10-10T08:41:33.684Z",
                "currentApiVersion": 2,
                "description": "sample",
                "eTag": 16,
                "groups": [
                  {
                    "name": "group-dev",
                    "uri": "/rest/groups/98496c86-93b3-4306-a150-b57fafea8c18"
                  }
                ],
                "hostname": "ci-005056b343ec.example.com",
                "id": "d47e3b46-f28e-4f8f-9c86-811c9b117c6d",
                "loginDomain": "Local",
                "model": "HPE OneView",
                "modified": "2017-10-12T18:23:54.781Z",
                "moduleName": "OneView Module",
                "name": "ci-005056b343ec",
                "serialNumber": "VMware-4233ff77ea4bbd6d-95fa7b282b596295",
                "state": "Online",
                "status": "OK",
                "type": "applianceV1",
                "uri": "/rest/appliances/d47e3b46-f28e-4f8f-9c86-811c9b117c6d",
                "username": "administrator",
                "version": "4.00.00-0309885"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1groups~1/post/responses/403"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      },
      "get": {
        "summary": "Returns a list of appliances",
        "description": "Returns a list of appliances matching the specified filter. A maximum of 100 resources are returned to the caller per call. Additional calls can be made to this API to retrieve any other appliances matching the filter.",
        "tags": [
          "Appliances"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "description": "Resource category.",
                  "enum": [
                    "appliances"
                  ]
                },
                "count": {
                  "type": "integer",
                  "description": "The actual number of resources returned."
                },
                "created": {
                  "type": "string",
                  "description": "Date and time when the appliance was created."
                },
                "members": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1rest~1appliances/post/responses/202/schema"
                  },
                  "description": "List of appliances."
                },
                "modified": {
                  "type": "string",
                  "description": "Last modification time."
                },
                "nextPageUri": {
                  "type": "string",
                  "description": "URI pointing to the page of resources following the list of resources contained in the specified collection."
                },
                "prevPageUri": {
                  "type": "string",
                  "description": "URI pointing to the page of resources preceding the list of resources contained in the specified collection."
                },
                "start": {
                  "type": "integer",
                  "description": "The row or record number of the first resource returned in the specified page."
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of appliances that would be returned from the query (including any filters), without pagination or enforced resource limits."
                },
                "uri": {
                  "type": "string",
                  "description": "The canonical URI of the appliances list"
                }
              },
              "example": {
                "category": "appliances",
                "count": 1,
                "created": "2017-10-13T07:26:58.618Z",
                "members": [
                  {
                    "applianceLocation": "172.1.1.62",
                    "applianceName": "ci-005056b343ec",
                    "applianceUri": "/rest/appliances/d47e3b46-f28e-4f8f-9c86-811c9b117c6d",
                    "category": "appliances",
                    "created": "2017-10-10T08:41:33.684Z",
                    "currentApiVersion": 2,
                    "description": null,
                    "eTag": 19,
                    "groups": [
                      {
                        "name": "group-dev",
                        "uri": "/rest/groups/98496c86-93b3-4306-a150-b57fafea8c18"
                      }
                    ],
                    "hostname": "ci-005056b343ec.example.com",
                    "id": "d47e3b46-f28e-4f8f-9c86-811c9b117c6d",
                    "loginDomain": "Local",
                    "model": "HPE OneView,",
                    "modified": "2017-10-13T06:23:53.943Z",
                    "name": "ci-005056b343ec",
                    "serialNumber": "VMware-4233ff77ea4bbd6d-95fa7b282b596295",
                    "state": "Online",
                    "status": "OK",
                    "type": "applianceV1",
                    "uri": "/rest/appliances/d47e3b46-f28e-4f8f-9c86-811c9b117c6d",
                    "username": "administrator",
                    "version": "4.00.00-0309885"
                  }
                ],
                "modified": "2017-10-13T07:26:58.618Z",
                "nextPageUri": null,
                "prevPageUri": null,
                "start": 0,
                "total": 1,
                "uri": "/rest/appliances?count=25&start=0"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/appliances/{id}": {
      "get": {
        "summary": "Returns an appliance",
        "description": "Returns an existing appliance identified by its unique ID.",
        "tags": [
          "Appliances"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "Appliance UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/paths/~1rest~1appliances/post/responses/202/schema"
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      },
      "patch": {
        "summary": "Updates an appliance",
        "description": "Use the PATCH REST API to update specific attributes of a given appliance resource.\nOnly one operation can be performed in each PATCH call.\nThe table below gives an overview of the options for the different operations.\n\n| Description                  | Operation | Path           | Value                                                       |\n| -----------                  | --------- | ----           | -----                                                       |\n| Request an appliance refresh | replace   | /status        | refreshPending                                              |\n| Edit appliance alias name    | replace   | /applianceName | new name                                                    |\n| Reconnect appliance          | replace   | /credential    | {username, password, caBase64Data, loginDomain, ignoreCert} |\n",
        "tags": [
          "Appliances"
        ],
        "consumes": [
          "application/json-patch+json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "content-type",
            "description": "The data format sent in the request body.",
            "in": "header",
            "required": true,
            "type": "string",
            "enum": [
              "application/json-patch+json"
            ]
          },
          {
            "name": "id",
            "description": "Appliance UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appliance",
            "description": "A valid JSON PATCH object.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "op": {
                  "type": "string",
                  "description": "Patch operation."
                },
                "path": {
                  "type": "string",
                  "description": "Attribute path to patch."
                },
                "value": {
                  "type": "string",
                  "description": "New attribute value."
                }
              },
              "required": [
                "op",
                "path",
                "value"
              ],
              "example": [
                {
                  "op": "replace",
                  "path": "/applianceName",
                  "value": "new name"
                }
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The absolute URI of a task created to perform the requested action."
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1groups~1/post/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      },
      "delete": {
        "summary": "Remove an appliance",
        "description": "Remove an existing appliance identified by its unique ID.\n",
        "tags": [
          "Appliances"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "Appliance UUID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1groups~1/post/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/appliances/{id}/sso": {
      "get": {
        "summary": "Returns the appliance single sign-on URL",
        "description": "Returns the appliance single sign-on URL.",
        "tags": [
          "Appliances"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "Appliance UUID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "appSsoUrl": {
                  "type": "string",
                  "description": "The single sign-on URL of the appliance."
                },
                "sessionId": {
                  "type": "string",
                  "description": "The session ID of the appliance."
                }
              },
              "example": [
                {
                  "appSsoUrl": "https://172.1.1.62/#/?s_sid=LTcxNDE5Nzk0MjcwC2ajNLDyi8f3SoDL-6jW4yeT5M9VwPEu",
                  "sessionId": "LTcxNDE5Nzk0MjcwC2ajNLDyi8f3SoDL-6jW4yeT5M9VwPEu"
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/certificates/https/remote/{address}": {
      "get": {
        "summary": "Retrieves server certificates",
        "description": "Retrieves the web server certificate and certificate chain of the specified remote appliance.",
        "tags": [
          "Certificates"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "address",
            "description": "Address of the server from which certificates are to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/paths/~1rest~1certificates~1servers/post/parameters/6/schema"
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/certificates/servers": {
      "post": {
        "summary": "Import server certificates",
        "description": "Imports the given Server certificate into the appliance.\nIf a leaf certificate is passed with aliasName,\nit is stored in the appliance with its aliasName.\nIf a leaf certificate is passed without aliasName,\nit is stored in the appliance with Common Name in the Certificate as aliasName.\nIf a CA chain is passed, root certificate is trusted with thumbprint\nprovided full chain can be established with the certs passed.\nThe maximum allowed certificate chain depth is 10.\nAppliance will not allow import of the user supplied certificate(s)\nif not able to build a valid certification path.\n",
        "tags": [
          "Certificates"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/0"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1groups~1/post/parameters/2"
          },
          {
            "name": "Forcesaveleaf",
            "type": "boolean",
            "description": "Header used to identify if the CA leaf has to be saved forcefully.\nDefault value is \"false\". List of valid input values are {\"false\",\"true\"}.\n",
            "in": "header",
            "required": false
          },
          {
            "name": "Skip-Cert-Validation",
            "type": "boolean",
            "description": "Header used to identify if certificate validations are enabled.\nDefault value is \"false\". List of valid input values are {\"false\",\"true\"}.\n",
            "in": "header",
            "required": false
          },
          {
            "name": "certificateDetails",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Identifies the resource type"
                    },
                    "created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time when the resource was created"
                    },
                    "description": {
                      "type": "string",
                      "description": "Brief description of the resource"
                    },
                    "eTag": {
                      "type": "string",
                      "description": "Entity tag/version ID of the resource, the same value that is returned in the ETag header on a GET of the resource"
                    },
                    "modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Date and time when the resource was last modified"
                    },
                    "name": {
                      "type": "string",
                      "description": "Display name for the resource"
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the resource"
                    },
                    "status": {
                      "type": "string",
                      "description": "Overall health status of the resource.",
                      "enum": [
                        "OK",
                        "Disabled",
                        "Warning",
                        "Critical",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "description": "Uniquely identifies the type of the JSON object"
                    },
                    "uri": {
                      "type": "string",
                      "description": "The canonical URI of the resources list"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "certificateDetails": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/paths/~1rest~1certificates~1servers/post/parameters/6/schema/allOf/0"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "aliasName": {
                                "type": "string",
                                "description": "Alias Name of the SSL certificate. Alphanumeric space dot(.) colon(:) hyphen(-) underscore(_) are allowed. The first character should be alphanumeric",
                                "maxLength": 150,
                                "minLength": 0
                              },
                              "alternativeName": {
                                "type": "string",
                                "description": "An optional entry that contains additional names that apply to the owner of the certificate, possibly including additional email addresses, DNS names, IP addresses, or other identifiers."
                              },
                              "base64Data": {
                                "type": "string",
                                "description": "Encrypted content of the SSL certificate."
                              },
                              "basicConstraints": {
                                "type": "string",
                                "description": "Basic constraints to control the usage of the certificate."
                              },
                              "certPath": {
                                "type": "object",
                                "description": "certificate path."
                              },
                              "commonName": {
                                "type": "string",
                                "description": "Common name of the remote appliance certificate."
                              },
                              "contactPerson": {
                                "type": "string",
                                "description": "Name of the contact person present in the remote appliance certificate."
                              },
                              "country": {
                                "type": "string",
                                "description": "Country code present in the remote appliance certificate."
                              },
                              "crlDistributionEndPoints": {
                                "type": "array",
                                "description": "Details about the Certificate Revocation List end points.",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "dnQualifier": {
                                "type": "string",
                                "description": "DN qualifier present in the remote appliance certificate."
                              },
                              "email": {
                                "type": "string",
                                "description": "Email address present in the remote appliance certificate in the format name@domain."
                              },
                              "enhancedKeyUsage": {
                                "type": "string",
                                "description": "Collection of object identifiers that are allowed to use the key associated with the remote appliance certificate."
                              },
                              "expiresInDays": {
                                "type": "string",
                                "description": "Number of days until the expiration of the certificate.\nInternet CA certificates are often no longer usable\nafter they expire because after the certificate expires,\nthe issuing authority is no longer required to maintain\ninformation about the status of the certificate.\n"
                              },
                              "givenName": {
                                "type": "string",
                                "description": "The given name present in the remote appliance certificate."
                              },
                              "initials": {
                                "type": "string",
                                "description": "Initials present in the remote appliance certificate."
                              },
                              "issuer": {
                                "type": "string",
                                "description": "Issuer details of the remote appliance certificate."
                              },
                              "keyUsage": {
                                "type": "string",
                                "description": "Collection of object identifiers that define purpose of the certificate."
                              },
                              "locality": {
                                "type": "string",
                                "description": "The city or locality provided in the remote appliance certificate."
                              },
                              "locationState": {
                                "type": "string",
                                "description": "The state or province provided in the remote appliance certificate."
                              },
                              "organization": {
                                "type": "string",
                                "description": "Organization name present in the remote appliance certificate."
                              },
                              "organizationalUnit": {
                                "type": "string",
                                "description": "Organizational unit present in the remote appliance certificate."
                              },
                              "publicKey": {
                                "type": "string",
                                "description": "Public key information of the remote appliance certificate."
                              },
                              "serialNumber": {
                                "type": "string",
                                "description": "A number assigned to the certificate by the CA,\nwhich is unique across all certificates issued by this CA.\nThe issuer name and a serial number together identify a certificate uniquely.\n"
                              },
                              "sha1Fingerprint": {
                                "type": "string",
                                "description": "Unique identifier for the certificate encrypted using SHA1."
                              },
                              "sha256Fingerprint": {
                                "type": "string",
                                "description": "Unique identifier for the certificate encrypted using SHA256."
                              },
                              "sha384Fingerprint": {
                                "type": "string",
                                "description": "Unique identifier for the certificate encrypted using SHA384."
                              },
                              "signatureAlgorithm": {
                                "type": "string",
                                "description": "The encryption algorithm used by the issuer to sign the remote appliance certificate."
                              },
                              "surname": {
                                "type": "string",
                                "description": "The surname present in the remote appliance certificate."
                              },
                              "validFrom": {
                                "type": "string",
                                "description": "The date on which the issued remote certificate became valid.",
                                "format": "date-time"
                              },
                              "validUntil": {
                                "type": "string",
                                "description": "The date after which the remote appliance certificate will be invalid.",
                                "format": "date-time"
                              },
                              "version": {
                                "type": "string",
                                "description": "X.509 version information for the certificate;\na prevalent version is X.509 version 3, which is a standard\nthat allows a certificate to contain customized extensions.\n"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "certificateStatus": {
                      "type": "object",
                      "properties": {
                        "chainStatus": {
                          "type": "string",
                          "description": "The verification status of the remote appliance certificate chain."
                        },
                        "selfsigned": {
                          "type": "boolean",
                          "description": "The attribute that indicates whether the remote certificate is self-signed or not."
                        },
                        "trusted": {
                          "type": "boolean",
                          "description": "The attribute that indicates whether the remote appliance certificate is trusted or not."
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/paths/~1rest~1tasks~1%7Bid%7D/get/responses/200/schema"
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/certificates/servers/{aliasName}": {
      "delete": {
        "summary": "Removes certificate",
        "description": "Removes the SSL Leaf certificate having alias name specified as part of {aliasName}.",
        "tags": [
          "Certificates"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/0"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "parentTask",
            "description": "ParentTask Uri",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "aliasName",
            "description": "Alias of the certificate to be removed.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/paths/~1rest~1tasks~1%7Bid%7D/get/responses/200/schema"
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/converged-systems": {
      "get": {
        "summary": "Returns converged-systems list",
        "description": "Returns converged-systems list by query.",
        "tags": [
          "Converged Systems"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/7"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "converged-systems"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1converged-systems~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/converged-systems/{id}": {
      "get": {
        "summary": "Returns a converged system",
        "description": "Returns an existing converged system identified by its unique ID.",
        "tags": [
          "Converged Systems"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of converged system.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures~1%7Bid%7D/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "The category is used to help identify the kind of resource.",
                      "enum": [
                        "converged-systems"
                      ]
                    },
                    "iloServers": {
                      "type": "array",
                      "description": "Servers of ilo.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "esxiHost": {
                            "type": "string",
                            "description": "Host of ESXI."
                          },
                          "esxiSerialNumber": {
                            "type": "string",
                            "description": "Serial Number of ESXI."
                          },
                          "iloServerId": {
                            "type": "integer",
                            "description": "Server ID of ilo."
                          },
                          "managedStatus": {
                            "type": "string",
                            "description": "Managed status."
                          },
                          "nodeName": {
                            "type": "string",
                            "description": "Name of the node."
                          },
                          "password": {
                            "type": "string",
                            "description": "Password."
                          },
                          "status": {
                            "type": "string",
                            "description": "Status."
                          },
                          "uri": {
                            "type": "string",
                            "description": "URI."
                          },
                          "userName": {
                            "type": "string",
                            "description": "User name."
                          }
                        }
                      }
                    },
                    "members": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Members list of the converged system."
                    },
                    "model": {
                      "type": "string",
                      "description": "Model of the converged system."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the converged system."
                    },
                    "originalStatus": {
                      "type": "integer",
                      "description": "Original status of the converged system."
                    },
                    "overallUtilization": {
                      "type": "object",
                      "description": "Overall utilization.",
                      "properties": {
                        "computeAllocated": {
                          "type": "integer",
                          "description": "Allocated compute."
                        },
                        "computeAvailable": {
                          "type": "integer",
                          "description": "Available compute."
                        },
                        "computeUsed": {
                          "type": "integer",
                          "description": "Used compute."
                        },
                        "memoryAllocated": {
                          "type": "integer",
                          "description": "Allocated memory."
                        },
                        "memoryAvailable": {
                          "type": "integer",
                          "description": "Available memory."
                        },
                        "memoryUsed": {
                          "type": "integer",
                          "description": "Used memory."
                        },
                        "storageAllocated": {
                          "type": "integer",
                          "description": "Allocated storage."
                        },
                        "storageAvailable": {
                          "type": "integer",
                          "description": "Available storage."
                        },
                        "storageUsed": {
                          "type": "integer",
                          "description": "Used storage."
                        },
                        "updated": {
                          "type": "boolean",
                          "description": "Flag of updated."
                        }
                      }
                    },
                    "releaseDate": {
                      "type": "string",
                      "description": "Date of release."
                    },
                    "resourceParams": {
                      "type": "object",
                      "description": "Resource params.",
                      "properties": {
                        "cluster": {
                          "type": "string",
                          "description": "Cluster."
                        },
                        "dataCenter": {
                          "type": "string",
                          "description": "Data center."
                        }
                      }
                    },
                    "status": {
                      "type": "string",
                      "description": "General status."
                    },
                    "systemName": {
                      "type": "string",
                      "description": "System name."
                    },
                    "systemUri": {
                      "type": "string",
                      "description": "System URI."
                    },
                    "uri": {
                      "type": "string",
                      "description": "URI of the converged system."
                    },
                    "vcenterResourceUri": {
                      "type": "string",
                      "description": "VCenter resource URI."
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of the converged system."
                    },
                    "vpvResourceUrl": {
                      "type": "string",
                      "description": "VPV resource URL."
                    }
                  }
                }
              ],
              "example": {
                "version": "1.00.01-0244671",
                "resourceParams": {
                  "cluster": "HC-Datacenter-Cluster",
                  "dataCenter": "HC-Datacenter"
                },
                "systemName": "HC-Datacenter-Cluster",
                "iloServers": [
                  {
                    "userName": null,
                    "password": null,
                    "nodeName": "172.30.0.3",
                    "esxiSerialNumber": "USE5511NC3",
                    "esxiHost": "HPE-HC-USE5511NC3.alpha.hpe.net",
                    "iloServerId": 5,
                    "managedStatus": "unManaged",
                    "status": 3,
                    "uri": "null"
                  },
                  {
                    "userName": null,
                    "password": null,
                    "nodeName": "172.30.0.4",
                    "esxiSerialNumber": "USE5511NC4",
                    "esxiHost": "HPE-HC-USE5511NC4.alpha.hpe.net",
                    "iloServerId": 6,
                    "managedStatus": "unManaged",
                    "status": 3,
                    "uri": "null"
                  }
                ],
                "releaseDate": "Apr 16, 2016 18:48 PM",
                "vpvResourceUrl": null,
                "vcenterResourceUri": "/rest/external-apps/1",
                "systemUri": "/rest/system",
                "overallUtilization": {
                  "memoryUsed": 50242519040,
                  "storageAllocated": 6596532895744,
                  "storageUsed": 255577817088,
                  "updated": true,
                  "computeAllocated": 57528,
                  "memoryAllocated": 412056305664,
                  "computeUsed": 3682,
                  "storageAvailable": 6340955078656,
                  "computeAvailable": 53846,
                  "memoryAvailable": 361813786624
                },
                "status": "Unknown",
                "id": "56b19327-c91e-4d0d-b836-8a659b95494a",
                "uri": "/rest/converged-systems/56b19327-c91e-4d0d-b836-8a659b95494a",
                "category": "converged-systems",
                "name": "HC-Datacenter-Cluster",
                "model": "HPE HC380",
                "originalStatus": 1,
                "groups": [],
                "originalUri": "/rest/system",
                "appluri": "/rest/appliances/5ceb81d9-3bb8-406e-9d7f-16075032f67d",
                "applianceName": "ci-005056b3524e",
                "applianceLocation": "172.1.1.67"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/enclosures": {
      "get": {
        "summary": "Returns enclosures list",
        "description": "Returns enclosures list by query.",
        "tags": [
          "Enclosures"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "name": "userQuery",
            "description": "Query string used for full text search.\nExample\n  search resources whose attributes matches 'xxx' or 'yyy'\n    userQuery=xxx yyy\n  search resources whose attributes matches exactly 'xxx yyy'\n    userQuery='xxx yyy'\n",
            "in": "query",
            "type": "string"
          },
          {
            "name": "groupUris",
            "description": "A comma-separated list of group URIs to limit resources to return.\nThe resources to return must be in any of the groups identified by the group URIs.\nExample\n  groupUris='/rest/group/1, /rest/group/2'\n",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1rest~1tasks/get/responses/200/schema/allOf/0/allOf/1"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "uri": {
                          "type": "string",
                          "description": "The canonical URI of the resources list"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "enclosures"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1enclosures~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/paths/~1rest~1tasks/get/responses/401/schema"
            },
            "examples": {
              "application/json": {
                "errorCode": "INVALID_RESOURCE_URI",
                "message": "Resource not found.",
                "recommendedActions": [
                  "Confirm resource ID/URI and resend the request."
                ],
                "details": "The resource with the requested ID could not be retrieved.",
                "errorSource": null,
                "nestedErrors": [],
                "data": [],
                "canForce": false
              }
            }
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/enclosures/{id}": {
      "get": {
        "summary": "Returns an enclosure",
        "description": "Returns an existing enclosure identified by its unique ID.",
        "tags": [
          "Enclosures"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of the enclosure.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "applianceLocation": {
                      "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/applianceLocation"
                    },
                    "applianceName": {
                      "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/applianceName"
                    },
                    "appluri": {
                      "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/appluri"
                    },
                    "groups": {
                      "$ref": "#/paths/~1rest~1appliances/post/responses/202/schema/properties/groups"
                    },
                    "id": {
                      "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/id"
                    },
                    "originalUri": {
                      "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/originalUri"
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "activeOaPreferredIP": {
                      "type": "string",
                      "description": "Preferred IP address for the enclosure's active OA."
                    },
                    "assetTag": {
                      "type": "string",
                      "description": "Asset tag for the enclosure."
                    },
                    "category": {
                      "type": "string",
                      "description": "The category is used to help identify the kind of resource.",
                      "enum": [
                        "enclosures"
                      ]
                    },
                    "created": {
                      "type": "string",
                      "description": "Date and time when the resource was created."
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the enclosure."
                    },
                    "deviceBayCount": {
                      "type": "integer",
                      "description": "Number of device bays in the enclosure."
                    },
                    "deviceBays": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "bayNumber": {
                            "type": "integer",
                            "description": "Device Bay number."
                          },
                          "bayPowerState": {
                            "enum": [
                              "Unknown"
                            ],
                            "type": "string",
                            "description": "The power state of the bay."
                          },
                          "devicePresence": {
                            "type": "string",
                            "description": "Indicates whether a device is present in the bay."
                          },
                          "deviceUri": {
                            "type": "string",
                            "description": "URI for any device occupying the the bay."
                          },
                          "type": {
                            "type": "string",
                            "description": "Uniquely identifies the type of the JSON object."
                          }
                        }
                      },
                      "type": "array",
                      "description": "List of device bays in the enclosure."
                    },
                    "eTag": {
                      "type": "string",
                      "description": "Entity tag/version ID of the resource, the same value that is returned in the ETag header on a GET of the resource."
                    },
                    "enclosureGroupUri": {
                      "type": "string",
                      "description": "URI for this enclosure's enclosure-group."
                    },
                    "enclosureModel": {
                      "type": "string",
                      "description": "The enclosure model name, eg, 'BladeSystem c7000 Enclosure G2'."
                    },
                    "enclosureType": {
                      "type": "string",
                      "description": "The type of the enclosure, eg, 'C7000' or 'SY12000'."
                    },
                    "enclosureTypeUri": {
                      "type": "string",
                      "description": "The canonical URI of the resource type."
                    },
                    "fanBayCount": {
                      "type": "integer",
                      "description": "Number of fan bays in the enclosure."
                    },
                    "fanBays": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "bayNumber": {
                            "type": "integer",
                            "description": "Numeric identifier for the fan bay."
                          },
                          "devicePresence": {
                            "enum": [
                              "Absent",
                              "PresenceNoOp",
                              "PresenceUnknown",
                              "Present",
                              "Subsumed"
                            ],
                            "type": "string",
                            "description": "Indicates whether a fan is present."
                          },
                          "partNumber": {
                            "type": "string",
                            "description": "The part number of the fan."
                          },
                          "sparePartNumber": {
                            "type": "string",
                            "description": "The spare part number to be used when ordering an additional or replacement fan of this type."
                          },
                          "status": {
                            "enum": [
                              "Critical",
                              "Disabled",
                              "OK",
                              "Unknown",
                              "Warning"
                            ],
                            "type": "string",
                            "description": "Overall health status of the fan."
                          }
                        }
                      },
                      "type": "array",
                      "description": "List of fan bays in the enclosure."
                    },
                    "forceInstallFirmware": {
                      "type": "string",
                      "description": "Force installation of firmware even if same or newer version is already installed. Downgrading the firmware can result in the installation of unsupported firmware and cause hardware to cease operation.  Values include 'true' and 'false'."
                    },
                    "fwBaselineName": {
                      "type": "string",
                      "description": "The name of the current firmware baseline."
                    },
                    "fwBaselineUri": {
                      "type": "string",
                      "description": "The firmware baseline associated with this enclosure."
                    },
                    "interconnectBayCount": {
                      "type": "integer",
                      "description": "Number of interconnect bays in the enclosure."
                    },
                    "interconnectBays": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "bayNumber": {
                            "type": "integer",
                            "description": "Interconnect bay number."
                          },
                          "interconnectModel": {
                            "type": "string",
                            "description": "The model of the interconnect."
                          },
                          "interconnectUri": {
                            "type": "string",
                            "description": "URI of the interconnect associated with the interconnect module in this bay."
                          },
                          "logicalInterconnectUri": {
                            "type": "string",
                            "description": "URI for logical interconnect associated with the interconnect module in this bay."
                          },
                          "serialNumber": {
                            "type": "string",
                            "description": "The unique serial number of the interconnect."
                          }
                        }
                      },
                      "type": "array",
                      "description": "List of interconnect bays in the enclosure."
                    },
                    "isFwManaged": {
                      "type": "string",
                      "description": "Flag indicating whether the firmware is managed."
                    },
                    "licensingIntent": {
                      "enum": [
                        "NotApplicable",
                        "OneView",
                        "OneViewNoiLO",
                        "OneViewStandard"
                      ],
                      "type": "string",
                      "description": "The licensing policy for all the servers in the enclosure. Specify a correct licensingIntent with the management state. LicensingIntent OneViewStandard must be specified with Monitored, the other licensing types are for Managed enclosures."
                    },
                    "logicalEnclosureUri": {
                      "type": "string",
                      "description": "URI of the logical enclosure associated with the enclosure."
                    },
                    "managerBays": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "devicePresence": {
                            "type": "object",
                            "description": "Indicates whether a manager is present in the bay."
                          },
                          "ipAddress": {
                            "type": "string",
                            "description": "The IP address of the manager."
                          },
                          "managerType": {
                            "type": "string",
                            "description": "Type of manager."
                          }
                        }
                      },
                      "description": "A list of the Synergy Frame Link Module bays."
                    },
                    "modified": {
                      "type": "string",
                      "description": "Date and time when the resource was last modified."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the enclosure."
                    },
                    "oaBays": {
                      "type": "string",
                      "description": "Number of OA bays in the enclosure."
                    },
                    "partNumber": {
                      "type": "string",
                      "description": "Part number of the enclosure."
                    },
                    "powerSupplyBayCount": {
                      "type": "integer",
                      "description": "Number of power supply bays in the enclosure."
                    },
                    "powerSupplyBays": {
                      "items": {
                        "type": "object",
                        "properties": {
                          "bayNumber": {
                            "type": "integer",
                            "description": "Numeric identifier for the power supply bay."
                          },
                          "devicePresence": {
                            "enum": [
                              "Absent",
                              "PresenceNoOp",
                              "PresenceUnknown",
                              "Present",
                              "Subsumed"
                            ],
                            "type": "string",
                            "description": "Indicates whether a power supply is present."
                          },
                          "model": {
                            "type": "string",
                            "description": "The common descriptive model of the power supply."
                          },
                          "partNumber": {
                            "type": "string",
                            "description": "The part number of the power supply."
                          },
                          "serialNumber": {
                            "type": "string",
                            "description": "The unique serial number of the power supply."
                          },
                          "sparePartNumber": {
                            "type": "string",
                            "description": "The spare part number to be used when ordering an additional or replacement power supply of this type."
                          },
                          "status": {
                            "enum": [
                              "Critical",
                              "Disabled",
                              "OK",
                              "Unknown",
                              "Warning"
                            ],
                            "type": "string",
                            "description": "Overall health status of the power supply."
                          }
                        }
                      },
                      "type": "array",
                      "description": "List of power supply bays in the enclosure."
                    },
                    "rackName": {
                      "type": "string",
                      "description": "Name of the rack in which the enclosure resides."
                    },
                    "refreshState": {
                      "enum": [
                        "NotRefreshing",
                        "RefreshFailed",
                        "RefreshPending",
                        "Refreshing"
                      ],
                      "type": "string",
                      "description": "Indicates if the resource is currently refreshing."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Serial number of the enclosure."
                    },
                    "standbyOaPreferredIP": {
                      "type": "string",
                      "description": "Preferred IP address for the enclosure's standby OA."
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the enclosure.",
                      "enum": [
                        "Adding",
                        "Removing",
                        "Configuring",
                        "pending",
                        "Interrupted",
                        "Unmanaged",
                        "Unsupported",
                        "RemoveFailed",
                        "Configured",
                        "Monitored"
                      ]
                    },
                    "stateReason": {
                      "type": "string",
                      "description": "Indicates the reason the resource in its current state."
                    },
                    "status": {
                      "type": "string",
                      "description": "Overall health status of the enclosure.",
                      "enum": [
                        "OK",
                        "Disabled",
                        "Warning",
                        "Critical",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "description": "Uniquely identifies the type of the JSON object."
                    },
                    "uri": {
                      "type": "string",
                      "description": "URI of the enclosure."
                    },
                    "uuid": {
                      "type": "string",
                      "description": "UUID of the enclosure."
                    },
                    "vcmDomainId": {
                      "type": "string",
                      "description": "Domain ID of the enclosure."
                    },
                    "vcmDomainName": {
                      "type": "string",
                      "description": "Domain name of the enclosure."
                    },
                    "vcmMode": {
                      "type": "string",
                      "description": "Flag which indicates whether the enclosure is managed by an appliance."
                    },
                    "vcmUrl": {
                      "type": "string",
                      "description": "URL of the enclosure's management appliance."
                    }
                  }
                }
              ],
              "example": {
                "type": "EnclosureV200",
                "enclosureType": "C7000",
                "interconnectBays": [
                  {
                    "bayNumber": 1,
                    "interconnectUri": "/rest/interconnects/6ba6da4e-667b-4414-99f7-1ef0e1bca891",
                    "logicalInterconnectUri": "/rest/logical-interconnects/ed081aee-8611-4f70-ab06-5a0e2289a493",
                    "interconnectModel": "HP VC FlexFabric-20/40 F8 Module",
                    "interconnectBayType": "C7000InterconnectBay",
                    "serialNumber": "WECFSED100"
                  },
                  {
                    "bayNumber": 2,
                    "interconnectUri": "/rest/interconnects/ba7740a6-12e9-4805-84ec-10becc098632",
                    "logicalInterconnectUri": "/rest/logical-interconnects/ed081aee-8611-4f70-ab06-5a0e2289a493",
                    "interconnectModel": "HP VC FlexFabric-20/40 F8 Module",
                    "interconnectBayType": "C7000InterconnectBay",
                    "serialNumber": "WECFSED101"
                  },
                  {
                    "bayNumber": 3,
                    "interconnectUri": null,
                    "logicalInterconnectUri": null,
                    "interconnectModel": null,
                    "interconnectBayType": "C7000InterconnectBay",
                    "serialNumber": null
                  },
                  {
                    "bayNumber": 4,
                    "interconnectUri": null,
                    "logicalInterconnectUri": null,
                    "interconnectModel": null,
                    "interconnectBayType": "C7000InterconnectBay",
                    "serialNumber": null
                  },
                  {
                    "bayNumber": 5,
                    "interconnectUri": null,
                    "logicalInterconnectUri": null,
                    "interconnectModel": null,
                    "interconnectBayType": "C7000InterconnectBay",
                    "serialNumber": null
                  },
                  {
                    "bayNumber": 6,
                    "interconnectUri": null,
                    "logicalInterconnectUri": null,
                    "interconnectModel": null,
                    "interconnectBayType": "C7000InterconnectBay",
                    "serialNumber": null
                  },
                  {
                    "bayNumber": 7,
                    "interconnectUri": null,
                    "logicalInterconnectUri": null,
                    "interconnectModel": null,
                    "interconnectBayType": "C7000InterconnectBay",
                    "serialNumber": null
                  },
                  {
                    "bayNumber": 8,
                    "interconnectUri": null,
                    "logicalInterconnectUri": null,
                    "interconnectModel": null,
                    "interconnectBayType": "C7000InterconnectBay",
                    "serialNumber": null
                  }
                ],
                "managerBays": [
                  {
                    "ipAddress": "172.18.1.11",
                    "devicePresence": "Present",
                    "managerType": "OA"
                  },
                  {
                    "ipAddress": "172.18.1.12",
                    "devicePresence": "Present",
                    "managerType": "OA"
                  }
                ],
                "enclosureTypeUri": "/rest/enclosure-types/c7000",
                "interconnectBayCount": 8,
                "deviceBays": [
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 1,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/31393736-3831-4753-4831-30305837524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 2,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/31393736-3831-4753-4831-30315837524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 3,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/37333036-3831-4753-4831-30305838524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 4,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/37333036-3831-4753-4831-30315838524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 5,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/37333036-3831-4753-4831-30325838524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 6,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/37333036-3831-4753-4831-30335838524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 7,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/37333036-3831-4753-4831-30345838524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 8,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/37333036-3831-4753-4831-30355838524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 9,
                    "devicePresence": "Subsumed",
                    "deviceUri": null,
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 10,
                    "devicePresence": "Subsumed",
                    "deviceUri": null,
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 11,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/30303437-3933-4753-4831-30305834524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 12,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/30303437-3933-4753-4831-30315834524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 13,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/30303437-3933-4753-4831-30325834524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 14,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/30303437-3933-4753-4831-30335834524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 15,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/30303437-3933-4753-4831-30345834524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  },
                  {
                    "type": "DeviceBayV200",
                    "bayNumber": 16,
                    "devicePresence": "Present",
                    "deviceUri": "/rest/server-hardware/30303437-3933-4753-4831-30355834524E",
                    "deviceBayType": "C7000DeviceBay",
                    "bayPowerState": "Unknown"
                  }
                ],
                "uuid": "09SGH100X6J1",
                "fwBaselineUri": null,
                "logicalEnclosureUri": "/rest/logical-enclosures/87d78fdd-c02c-4cad-be4a-7c54fcb58b9c",
                "partNumber": "507019-B21",
                "fanBays": [
                  {
                    "bayNumber": 1,
                    "devicePresence": "Present",
                    "status": "OK",
                    "partNumber": "412140-B21",
                    "sparePartNumber": "413996-001",
                    "fanBayType": "C7000FanBay"
                  },
                  {
                    "bayNumber": 2,
                    "devicePresence": "Present",
                    "status": "OK",
                    "partNumber": "412140-B21",
                    "sparePartNumber": "413996-001",
                    "fanBayType": "C7000FanBay"
                  },
                  {
                    "bayNumber": 3,
                    "devicePresence": "Present",
                    "status": "OK",
                    "partNumber": "412140-B21",
                    "sparePartNumber": "413996-001",
                    "fanBayType": "C7000FanBay"
                  },
                  {
                    "bayNumber": 4,
                    "devicePresence": "Present",
                    "status": "OK",
                    "partNumber": "412140-B21",
                    "sparePartNumber": "413996-001",
                    "fanBayType": "C7000FanBay"
                  },
                  {
                    "bayNumber": 5,
                    "devicePresence": "Present",
                    "status": "OK",
                    "partNumber": "412140-B21",
                    "sparePartNumber": "413996-001",
                    "fanBayType": "C7000FanBay"
                  },
                  {
                    "bayNumber": 6,
                    "devicePresence": "Present",
                    "status": "OK",
                    "partNumber": "412140-B21",
                    "sparePartNumber": "413996-001",
                    "fanBayType": "C7000FanBay"
                  },
                  {
                    "bayNumber": 7,
                    "devicePresence": "Present",
                    "status": "OK",
                    "partNumber": "412140-B21",
                    "sparePartNumber": "413996-001",
                    "fanBayType": "C7000FanBay"
                  },
                  {
                    "bayNumber": 8,
                    "devicePresence": "Present",
                    "status": "OK",
                    "partNumber": "412140-B21",
                    "sparePartNumber": "413996-001",
                    "fanBayType": "C7000FanBay"
                  },
                  {
                    "bayNumber": 9,
                    "devicePresence": "Present",
                    "status": "OK",
                    "partNumber": "412140-B21",
                    "sparePartNumber": "413996-001",
                    "fanBayType": "C7000FanBay"
                  },
                  {
                    "bayNumber": 10,
                    "devicePresence": "Present",
                    "status": "OK",
                    "partNumber": "412140-B21",
                    "sparePartNumber": "413996-001",
                    "fanBayType": "C7000FanBay"
                  }
                ],
                "powerSupplyBays": [
                  {
                    "bayNumber": 1,
                    "devicePresence": "Present",
                    "status": "OK",
                    "model": "HP 2400W HE PSU",
                    "serialNumber": "5AGUD100L2V2LZ",
                    "partNumber": "499253-B21",
                    "sparePartNumber": "500242-001",
                    "powerSupplyBayType": "C7000PowerSupplyBay"
                  },
                  {
                    "bayNumber": 2,
                    "devicePresence": "Present",
                    "status": "OK",
                    "model": "HP 2400W HE PSU",
                    "serialNumber": "5AGUD101L2V2LZ",
                    "partNumber": "499253-B21",
                    "sparePartNumber": "500242-001",
                    "powerSupplyBayType": "C7000PowerSupplyBay"
                  },
                  {
                    "bayNumber": 3,
                    "devicePresence": "Present",
                    "status": "OK",
                    "model": "HP 2400W HE PSU",
                    "serialNumber": "5AGUD102L2V2LZ",
                    "partNumber": "499253-B21",
                    "sparePartNumber": "500242-001",
                    "powerSupplyBayType": "C7000PowerSupplyBay"
                  },
                  {
                    "bayNumber": 4,
                    "devicePresence": "Present",
                    "status": "OK",
                    "model": "HP 2400W HE PSU",
                    "serialNumber": "5AGUD103L2V2LZ",
                    "partNumber": "499253-B21",
                    "sparePartNumber": "500242-001",
                    "powerSupplyBayType": "C7000PowerSupplyBay"
                  },
                  {
                    "bayNumber": 5,
                    "devicePresence": "Present",
                    "status": "OK",
                    "model": "HP 2400W HE PSU",
                    "serialNumber": "5AGUD104L2V2LZ",
                    "partNumber": "499253-B21",
                    "sparePartNumber": "500242-001",
                    "powerSupplyBayType": "C7000PowerSupplyBay"
                  },
                  {
                    "bayNumber": 6,
                    "devicePresence": "Present",
                    "status": "OK",
                    "model": "HP 2400W HE PSU",
                    "serialNumber": "5AGUD105L2V2LZ",
                    "partNumber": "499253-B21",
                    "sparePartNumber": "500242-001",
                    "powerSupplyBayType": "C7000PowerSupplyBay"
                  }
                ],
                "enclosureGroupUri": "/rest/enclosure-groups/b43512bd-4ba9-4438-bdf5-812ad394bbb9",
                "deviceBayCount": 16,
                "enclosureModel": "BladeSystem c7000 Enclosure G3",
                "licensingIntent": "OneView",
                "isFwManaged": false,
                "fwBaselineName": null,
                "fanBayCount": 10,
                "powerSupplyBayCount": 6,
                "forceInstallFirmware": false,
                "serialNumber": "SGH100X6J1",
                "refreshState": "NotRefreshing",
                "eTag": "2017-11-09T01:19:31.099Z",
                "status": "OK",
                "uri": "/rest/enclosures/13d28edf-7a73-47e1-abc7-26bd75d033f8",
                "name": "Encl1",
                "state": "Configured",
                "stateReason": "None",
                "description": null,
                "category": "enclosures",
                "created": "2017-07-16T22:06:32.898Z",
                "modified": "2017-11-09T01:19:31.099Z",
                "standbyOaPreferredIP": "172.18.1.12",
                "activeOaPreferredIP": "172.18.1.11",
                "assetTag": "",
                "rackName": "Rack-221",
                "vcmDomainId": "@ab92590718760e41ded4d39c129822",
                "vcmDomainName": "OneViewDomain",
                "vcmMode": true,
                "vcmUrl": "https://172.18.2.11",
                "oaBays": 2,
                "groups": [],
                "id": "13d28edf-7a73-47e1-abc7-26bd75d033f8",
                "originalUri": "/rest/enclosures/09SGH100X6J1",
                "appluri": "/rest/appliances/0c77be5f-1d51-4ad4-984e-9dcd5fc050a1",
                "applianceName": "ci-005056b3524eov3100816",
                "applianceLocation": "172.18.3.11"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/enclosures/{id}/oaSsoUrl": {
      "get": {
        "summary": "Returns single sign-on URI of OA in the enclosure",
        "description": "Returns active or standby OA single sign-onURI of the enclosure identified by its unique ID.",
        "tags": [
          "Enclosures"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of enclosure.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "role",
            "description": "The role of the OA. Default is \"Active\".",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Active",
              "Standby"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ssoUrl": {
                  "type": "string",
                  "description": "The URI to Single Sign On (SSO) OA"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/groups/": {
      "post": {
        "summary": "Creates a group",
        "description": "Creates a new group.\n",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "content-type",
            "description": "Specifies the content type of the request body and should be set to application/json.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "group",
            "description": "A valid group JSON object.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the new group. Empty or duplicate names are not allowed."
                },
                "parentUri": {
                  "type": "string",
                  "description": "URI of the parent group."
                }
              },
              "required": [
                "name"
              ],
              "example": {
                "name": "USA",
                "type": "static",
                "parentUri": "/rest/groups/88366e29-c455-4a3a-a544-ca2d87965793"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "eTag": {
                  "type": "integer",
                  "description": "Entity tag/version ID of the group."
                },
                "id": {
                  "type": "string",
                  "description": "UUID of the group."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the group."
                },
                "parentName": {
                  "type": "string",
                  "description": "Name of the group's parent."
                },
                "parentUri": {
                  "type": "string",
                  "description": "URI of the group's parent."
                },
                "resourceNumber": {
                  "type": "integer",
                  "description": "Number of resources belonging to the group, including the resources in it's subgroups."
                },
                "state": {
                  "type": "string",
                  "description": "Current state of the group.",
                  "enum": [
                    "None"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Current health status of the group.",
                  "enum": [
                    "OK"
                  ]
                },
                "type": {
                  "type": "string",
                  "description": "Type of the group.",
                  "enum": [
                    "static"
                  ]
                },
                "uri": {
                  "type": "string",
                  "description": "URI that uniquely identifies this group."
                }
              },
              "example": {
                "eTag": 11,
                "id": "88366e29-c455-4a3a-a544-ca2d87965793",
                "name": "USA",
                "parentName": null,
                "parentUri": null,
                "resourceNumber": 5,
                "state": "None",
                "status": "OK",
                "type": "static",
                "uri": "/rest/groups/88366e29-c455-4a3a-a544-ca2d87965793"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/paths/~1rest~1tasks/get/responses/401/schema"
            },
            "examples": {
              "application/json": {
                "errorCode": "ADMIN_REQUIRED",
                "message": "Authorization error: User not authorized for this operation.",
                "recommendedActions": [
                  "Please verify your credentials and re-authenticate as an Infrastructure administrator before attempting the operation again."
                ],
                "details": "This operation requires administrative privileges.",
                "errorSource": null,
                "nestedErrors": [],
                "data": [],
                "canForce": false
              }
            }
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      },
      "get": {
        "summary": "Returns a list of groups",
        "description": "Returns a list of groups matching the specified filter. By default maximum of 20 resources are returned to the caller per call. Additional calls can be made to this API to retrieve any other groups matching the filter by setting the start position of the resources list.\n",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "start",
            "description": "The position of the first item to return, using 0-based indexing. If not specified, the default is 0 - start with the first available item.",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "description": "The number of resources to return. A count of -1 requests all resources. The actual number of items in the response can differ from the requested count if the sum of start and count exceed the total number of items.",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string",
                  "description": "Resource category.",
                  "enum": [
                    "groups"
                  ]
                },
                "start": {
                  "type": "integer",
                  "description": "The row or record number of the first group returned."
                },
                "count": {
                  "type": "integer",
                  "description": "The actual number of groups returned."
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/paths/~1rest~1groups~1/post/responses/201/schema"
                  },
                  "description": "List of groups."
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of groups that would be returned from the query without pagination"
                },
                "unfilteredTotal": {
                  "type": "integer",
                  "description": "The total number of groups that would be returned from the query without the filters or limit."
                }
              },
              "example": {
                "category": "groups",
                "count": 1,
                "items": [
                  {
                    "eTag": 11,
                    "id": "88366e29-c455-4a3a-a544-ca2d87965793",
                    "name": "USA",
                    "parentName": null,
                    "parentUri": null,
                    "resourceNumber": 5,
                    "state": "None",
                    "status": "OK",
                    "type": "static",
                    "uri": "/rest/groups/88366e29-c455-4a3a-a544-ca2d87965793"
                  }
                ],
                "start": 1,
                "total": 3,
                "unfilteredTotal": 3
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/groups/{id}": {
      "get": {
        "summary": "Returns a group object",
        "description": "Returns an existing group identified by its UUID.\n",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "UUID of the group.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/paths/~1rest~1groups~1/post/responses/201/schema"
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      },
      "patch": {
        "summary": "Change a group",
        "description": "Use the PATCH REST API to update specific attributes of a given group.\nRefer to [rfc6902](https://tools.ietf.org/html/rfc6902) for the syntax.\nThe table below gives an overview of the options for the different operations.\n\n| Description           | Operation | Path       | Value             |\n| -----------           | --------- | ----       | -----             |\n| Change group name     | replace   | /name      | Another name      |\n| Change group parent   | replace   | /parentUri | Another group URI |\n| Add a group member    | add       | /members/- | Resource URI      |\n| Remove a group member | remove    | /members/0 |                   |\n",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "If-Match",
            "description": "The If-Match header is used to validate the requester is operating on the latest copy of the resource. Set this value to the current value of the eTag attribute of the resource. If the current eTag on the resource does not match the header value, the request will fail with a conflict error.",
            "in": "header",
            "required": true,
            "type": "integer"
          },
          {
            "name": "content-type",
            "description": "The data format sent in the request body.",
            "in": "header",
            "required": true,
            "type": "string",
            "enum": [
              "application/json-patch+json"
            ]
          },
          {
            "name": "id",
            "description": "UUID of the group.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "propagate",
            "description": "Propagate is used for some specific resources.\nWhen propagate = 'true', add/remove the resource and it's related resources to/from the group.\nWhen propagate is not 'true', only add/remove the resource itself to/from the group.\n\n| Resource type            | Description                                                                 |\n| -------------            | -----------                                                                 |\n| enclosures               | Apply action on blades and related server profiles in the enclosure(s)      |\n| server-profile-templates | Apply action on server profiles created from the server profile template(s) |\n| san-managers             | Apply action on SANs managed by the SAN manager(s)                          |\n| storage-systems          | Apply action on storage pools and storage volumes in the storage system(s)  |\n| storage-pools            | Apply action on storage volumes in the storage pool(s)                      |\n| server-hardware          | Apply action on server profiles assigned to the server hardware(s)          |\n| appliances               | Apply action on all resources in the appliance(s)                           |\n",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "patch",
            "description": "A valid JSON PATCH object.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "op": {
                  "type": "string",
                  "description": "The patch operation."
                },
                "path": {
                  "type": "string",
                  "description": "The attribute path to patch."
                },
                "value": {
                  "type": "string",
                  "description": "New attribute value."
                }
              },
              "required": [
                "op",
                "path",
                "value"
              ],
              "example": [
                {
                  "op": "add",
                  "path": "/members/-",
                  "value": "/rest/appliances/id2"
                },
                {
                  "op": "add",
                  "path": "/members/-",
                  "value": "/rest/enclosures/id2"
                },
                {
                  "op": "add",
                  "path": "/members/-",
                  "value": "/rest/server-hardware/id3"
                }
              ]
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The absolute URI of a task created to perform the requested action."
              }
            },
            "schema": {
              "$ref": "#/paths/~1rest~1groups~1/post/responses/201/schema"
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1groups~1/post/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/paths/~1rest~1tasks/get/responses/401/schema"
            },
            "examples": {
              "application/json": {
                "errorCode": "CONFLICT",
                "message": "The request conflicts with the current content of the resource.",
                "recommendedActions": [
                  "Get the current version number of the resource and put it into the request."
                ],
                "details": "The request conflicts with the current content of the resource.",
                "errorSource": null,
                "nestedErrors": [],
                "data": [],
                "canForce": false
              }
            }
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      },
      "delete": {
        "summary": "Deletes a group",
        "description": "Deletes an existing group identified by its UUID.\n",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "UUID of the group.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The absolute URI of a task created to perform the requested action."
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1groups~1/post/responses/403"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/groups/{id}/members": {
      "get": {
        "summary": "Returns a group members list",
        "description": "Returns the members list of an existing group identified by its UUID.\n",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "UUID of the group.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "start",
            "description": "The position of the first member to return, using 0-based indexing. If not specified, the default is 0 - start with the first available member.",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 0
          },
          {
            "name": "count",
            "description": "The number of members to return. A count of -1 requests all members. The actual number of members in the response can differ from the requested count if the sum of start and count exceed the total number of items.",
            "in": "query",
            "required": false,
            "type": "integer",
            "default": 20
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "eTag": {
                  "type": "integer",
                  "description": "The version number of the group."
                },
                "start": {
                  "type": "integer",
                  "description": "The row or record number of the first member returned."
                },
                "count": {
                  "type": "integer",
                  "description": "The number of members returned."
                },
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "index": {
                        "type": "integer",
                        "description": "The position of the member in the group members array."
                      },
                      "category": {
                        "type": "string",
                        "description": "Category of the resource.",
                        "enum": [
                          "appliances",
                          "server-hardware",
                          "server-profiles",
                          "enclosures",
                          "converged-systems",
                          "storage-pools",
                          "storage-systems",
                          "storage-volumes",
                          "san-managers",
                          "managed-sans"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the resource."
                      },
                      "uri": {
                        "type": "string",
                        "description": "URI that uniquely identify this resource."
                      },
                      "associationType": {
                        "type": "string",
                        "description": "Association type of this resource with the group.",
                        "enum": [
                          "HAS_A"
                        ]
                      }
                    },
                    "example": {
                      "index": 0,
                      "category": "storage-pools",
                      "name": "devPool",
                      "uri": "/rest/storage-pools/c382ba36-3a95-4598-a72c-d7b677168787",
                      "associationType": "HAS_A"
                    }
                  },
                  "description": "List of group members."
                },
                "total": {
                  "type": "integer",
                  "description": "The total number of members that would be returned from the query without pagination."
                },
                "unfilteredTotal": {
                  "type": "integer",
                  "description": "The total number of members that would be returned from the query without the filters or limit."
                }
              },
              "example": {
                "count": 1,
                "eTag": 3,
                "items": [
                  {
                    "index": 0,
                    "category": "storage-pools",
                    "name": "devPool",
                    "uri": "/rest/storage-pools/c382ba36-3a95-4598-a72c-d7b677168787",
                    "associationType": "HAS_A"
                  }
                ],
                "start": 0,
                "total": "1,",
                "unfilteredTotal": 1
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/login-sessions/": {
      "post": {
        "summary": "Create a session",
        "description": "Create a session",
        "tags": [
          "Login Sessions"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1groups~1/post/parameters/2"
          },
          {
            "name": "credential",
            "description": "User credential.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userName": {
                  "type": "string",
                  "description": "User name."
                },
                "password": {
                  "type": "string",
                  "description": "Password of the user."
                },
                "authLoginDomain": {
                  "type": "string",
                  "description": "Login domain of the user. If the user is in LDAP or AD server, then the domain name is the directory server name.\nIf the user is a local user, then the domain name is local.\n"
                }
              },
              "required": [
                "userName",
                "password"
              ],
              "example": {
                "userName": "sarah",
                "password": "secret",
                "authLoginDomain": "local"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                },
                "user": {
                  "type": "object",
                  "properties": {
                    "domain": {
                      "type": "string"
                    },
                    "user_roles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "userName": {
                      "type": "string"
                    }
                  }
                }
              },
              "example": {
                "token": "NTAxMjQzNDc2NzIyR2yWViDr0ENEJvM1cu7IJap7h_UmkDSj",
                "user": {
                  "domain": "local",
                  "user_roles": [
                    "Infrastructure administrator"
                  ],
                  "userName": "administrator"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      },
      "delete": {
        "summary": "Delete a session",
        "description": "Delete a session",
        "tags": [
          "Login Sessions"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/managed-sans": {
      "get": {
        "summary": "Returns managed-sans list",
        "description": "Returns managed-sans list by query.",
        "tags": [
          "Managed SANs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/7"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "managed-sans"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1managed-sans~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/managed-sans/{id}": {
      "get": {
        "summary": "Returns a managed SAN",
        "description": "Returns an existing managed SAN identified by its unique ID.",
        "tags": [
          "Managed SANs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of managed SAN.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "applOwners": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "appluri": {
                            "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/appluri"
                          },
                          "applianceLocation": {
                            "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/applianceLocation"
                          },
                          "applianceName": {
                            "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/applianceName"
                          },
                          "currentApiVersion": {
                            "type": "string",
                            "description": "Current API version."
                          },
                          "originalUri": {
                            "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/originalUri"
                          },
                          "originalStatus": {
                            "type": "string",
                            "description": "The original status of the resource."
                          }
                        }
                      }
                    },
                    "groups": {
                      "$ref": "#/paths/~1rest~1appliances/post/responses/202/schema/properties/groups"
                    },
                    "id": {
                      "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/id"
                    }
                  }
                },
                {
                  "type": "object"
                }
              ],
              "properties": {
                "aliasCount": {
                  "type": "integer",
                  "description": "The total number of aliases on the SAN."
                },
                "associatedNetworks": {
                  "type": "array",
                  "properties": {
                    "interconnectUri": {
                      "type": "string",
                      "description": "Interconnect URI, for direct attach networks."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the network."
                    },
                    "networkType": {
                      "type": "string",
                      "description": "Type of the network.",
                      "enum": [
                        "FC",
                        "FCoE",
                        "Hybrid"
                      ]
                    },
                    "uri": {
                      "type": "string",
                      "description": "URI of the network."
                    }
                  },
                  "description": "A list of associated network objects."
                },
                "category": {
                  "type": "string",
                  "description": "Category for this resource.",
                  "enum": [
                    "managed-sans"
                  ]
                },
                "created": {
                  "type": "string",
                  "description": "Timestamp when the resource was created."
                },
                "description": {
                  "type": "string",
                  "description": "Description for this resource."
                },
                "deviceManagerName": {
                  "type": "string",
                  "description": "Name of the device manager that contains this SAN."
                },
                "displayName": {
                  "type": "string",
                  "description": "User friendly name to be used in the user interface."
                },
                "eTag": {
                  "type": "string",
                  "description": "Unique identifier for this resource as it stands currently this value will change when the resource is modified."
                },
                "endpointsUri": {
                  "type": "string",
                  "description": "Device endpoint URIs connected to this SAN."
                },
                "imported": {
                  "type": "boolean",
                  "description": "Flag determining if the SAN has been imported by the SAN manager."
                },
                "infoForSpecificAppliances": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "appluri": {
                        "type": "string",
                        "description": "URI of the appliance."
                      },
                      "originalAliasesUri": {
                        "type": "string",
                        "description": "URI of the original aliases."
                      },
                      "originalCreated": {
                        "type": "string",
                        "description": "Timestamp of the original created."
                      },
                      "originalDeviceManagerUri": {
                        "type": "string",
                        "description": "URI of the original device manager."
                      },
                      "originalDeviceManagersUri": {
                        "type": "string",
                        "description": "URI of the original device managers."
                      },
                      "originalModified": {
                        "type": "string",
                        "description": "Timestamp of the original modified."
                      },
                      "originalPortsUri": {
                        "type": "string",
                        "description": "URI of the original ports."
                      },
                      "originalSanServicesUri": {
                        "type": "string",
                        "description": "URI of the original san services."
                      },
                      "originalSwitchesUri": {
                        "type": "string",
                        "description": "URI of the original switches."
                      },
                      "originalUri": {
                        "type": "string",
                        "description": "URI of the original resource."
                      },
                      "originalZonesUri": {
                        "type": "string",
                        "description": "URI of the original zones."
                      }
                    }
                  }
                },
                "isActualFc": {
                  "type": "boolean",
                  "description": "Indicates if the physical layer is detected to be Fibre Channel."
                },
                "isActualFcoe": {
                  "type": "boolean",
                  "description": "Indicates if the physical layer detects FCoE."
                },
                "isExpectedFc": {
                  "type": "boolean",
                  "description": "Indicates if the SAN is expected to be Fibre Channel."
                },
                "isExpectedFcoe": {
                  "type": "boolean",
                  "description": "Indicates if the SAN is expected to be FCoE."
                },
                "isFcCapable": {
                  "type": "boolean",
                  "description": "Indicates if the physical layer is Fibre Channel compatible."
                },
                "isFcoeCapable": {
                  "type": "boolean",
                  "description": "Indicates if the physical layer is FCoE compatible."
                },
                "isInternal": {
                  "type": "boolean",
                  "description": "A flag indicating if the resource is managed by an internal SAN manager."
                },
                "modified": {
                  "type": "string",
                  "description": "Timestamp when the resource was modified."
                },
                "name": {
                  "type": "string",
                  "description": "SAN identifier that should be durable and persistent on the device manager that can be used by the provider for referencing that SAN in the future (e.g. Brocade SAN/Fabric ElementName)."
                },
                "portsFreeCount": {
                  "type": "integer",
                  "description": "The total number of free ports in the SAN."
                },
                "portsTotalCount": {
                  "type": "integer",
                  "description": "The total number of free and occupied ports in the SAN."
                },
                "portsUsedCount": {
                  "type": "integer",
                  "description": "The total number of used ports in the SAN."
                },
                "principalSwitch": {
                  "type": "string",
                  "description": "WWN of the principal switch in this SAN."
                },
                "providerName": {
                  "type": "string",
                  "description": "SAN provider name (e.g. HP B-series/Brocade Network Advisor)."
                },
                "publicAttributes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "description": "Public data store to be managed by clients and providers. The contents of the PUT publicAttributes will replace the existing list so leaving out a public attribute from the list will effectively delete it."
                },
                "refreshState": {
                  "type": "string",
                  "description": "Refresh substate of the resource.",
                  "enum": [
                    "RefreshPending",
                    "Refreshing",
                    "Stable",
                    "Unknown"
                  ]
                },
                "routingId": {
                  "type": "string",
                  "description": "Identifier of a higher level construct that provides routing for this SAN across SAN boundaries."
                },
                "sanPolicy": {
                  "type": "object",
                  "properties": {
                    "enableAliasing": {
                      "type": "boolean",
                      "description": "Flag controlling whether or not aliases will be created for initiators, targets and target groups based on the specified name formats."
                    },
                    "enableGroupAliasing": {
                      "type": "boolean",
                      "description": "Flag controlling whether or not aliases can contain more then one member."
                    },
                    "initiatorNameFormat": {
                      "type": "string",
                      "description": "Format to use for initiator alias names. The following built-in variables can be used as {hostName}, {initiatorName}, {initiatorWwn}."
                    },
                    "manageAllManagedEndpointAliases": {
                      "type": "boolean",
                      "description": "Flag controlling whether or not any alias containing a managed endpoint can be considered managed."
                    },
                    "renameInitiatorAliases": {
                      "type": "boolean",
                      "description": "Allow the rename of initiator aliases if required."
                    },
                    "renameTargetAliases": {
                      "type": "boolean",
                      "description": "Allow the rename of target aliases if required."
                    },
                    "renameZones": {
                      "type": "boolean",
                      "description": "Allow the rename of zones if required."
                    },
                    "targetGroupNameFormat": {
                      "type": "string",
                      "description": "Format to use for target group (ex. storage system port group) alias names. The following built-in variables can be used {storageSystemName}, {targetGroupName}"
                    },
                    "targetNameFormat": {
                      "type": "string",
                      "description": "Format to use for target (ex. storage system port) alias names. The following built-in variables can be used {storageSystemName}, {targetName}"
                    },
                    "zoneNameFormat": {
                      "type": "string",
                      "description": "Format to use when naming new and updated zones. Depending on the specified zoning policy, the following built-in variables can be used {hostName}, {initiatorName}, {initiatorWwn}, {storageSystemName}, {targetName}, {targetGroupName}"
                    },
                    "zoningPolicy": {
                      "type": "string",
                      "description": "Policy setting that affects the way that zones are created. Can be one of SingleInitiatorAllTargets, SingleInitiatorSingleStorageSystem, SingleInitiatorSingleTarget",
                      "enum": [
                        "NoZoning",
                        "SingleInitiatorAllTargets",
                        "SingleInitiatorSingleStorageSystem",
                        "SingleInitiatorSingleTarget",
                        "Unknown"
                      ]
                    }
                  },
                  "description": "Contains attributes related to policy on the SAN."
                },
                "sanServicesCount": {
                  "type": "integer",
                  "description": "The total number of san services on the SAN."
                },
                "sanType": {
                  "type": "string",
                  "description": "SAN type or class (e.g. Fabric or Flat SAN)."
                },
                "state": {
                  "type": "string",
                  "description": "State of the resource as defined by the state enum.",
                  "enum": [
                    "ConfigurationPending",
                    "Configured",
                    "Configuring",
                    "Deleting",
                    "Discovered",
                    "Managed",
                    "Removing"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Status of the resource as defined by the status enum.",
                  "enum": [
                    "Critical",
                    "Disabled",
                    "OK",
                    "Unknown",
                    "Warning"
                  ]
                },
                "switchCount": {
                  "type": "integer",
                  "description": "The total number of switches in the SAN."
                },
                "type": {
                  "type": "string",
                  "description": "Resource type represented by this resource."
                },
                "uri": {
                  "type": "string",
                  "description": "Static identifier for this resource."
                },
                "vLanId": {
                  "type": "integer",
                  "description": "Identifier for FCoE SANs."
                },
                "zoneCount": {
                  "type": "integer",
                  "description": "The total number of zones in the SAN."
                },
                "zoningState": {
                  "type": "string",
                  "description": "Zoning state of this SAN or a combined value of all underlying SAN. Unknown is returned if the underlying san connectivity states don't match.",
                  "enum": [
                    "Open",
                    "Unknown",
                    "Zoned"
                  ]
                }
              },
              "example": {
                "uri": "/rest/managed-sans/e3f2d88b-3302-45a9-be3d-55b8dc71604d",
                "name": "Encl2, interconnect 1_UP-C1-X3-DA",
                "type": "FCSanV3",
                "state": "Managed",
                "status": "OK",
                "imported": true,
                "aliasCount": 0,
                "associatedNetworks": [
                  {
                    "interconnectUri": "/rest/interconnects/0bd97016-037c-4f92-8d6c-2eef9c95ed77",
                    "name": "UP-C1-X3-DA",
                    "networkType": "FC",
                    "uri": "/rest/fc-networks/b478b428-9f32-4559-98f9-545e48d44546"
                  }
                ],
                "category": "managed-sans",
                "created": "2017-08-17T06:20:50.000Z",
                "deviceManagerName": "Direct attach",
                "displayName": "Encl2, interconnect 1_UP-C1-X3-DA",
                "endpointsUri": "/rest/fc-sans/managed-sans/33d3fa17-31d2-4a84-86a4-a7d200689a80/endpoints",
                "eTag": "10250",
                "isActualFc": true,
                "isActualFcoe": false,
                "isExpectedFc": true,
                "isExpectedFcoe": false,
                "isFcCapable": true,
                "isFcoeCapable": false,
                "isInternal": true,
                "modified": "2017-12-06T07:31:35.000Z",
                "portsFreeCount": 0,
                "portsTotalCount": 1,
                "portsUsedCount": 1,
                "principalSwitch": null,
                "providerName": "Direct attach",
                "publicAttributes": [],
                "refreshState": "Stable",
                "routingId": null,
                "sanPolicy": {
                  "enableAliasing": false,
                  "enableGroupAliasing": false,
                  "initiatorNameFormat": null,
                  "manageAllManagedEndpointAliases": false,
                  "renameInitiatorAliases": false,
                  "renameTargetAliases": false,
                  "renameZones": false,
                  "targetGroupNameFormat": null,
                  "targetNameFormat": null,
                  "zoneNameFormat": null,
                  "zoningPolicy": "NoZoning"
                },
                "sanServicesCount": 0,
                "sanType": "Flat SAN",
                "switchCount": 1,
                "vLanId": 0,
                "zoneCount": 0,
                "zoningState": "Open",
                "infoForSpecificAppliances": [
                  {
                    "originalAliasesUri": "/rest/fc-sans/managed-sans/33d3fa17-31d2-4a84-86a4-a7d200689a80/aliases",
                    "originalPortsUri": "/rest/fc-sans/managed-sans/33d3fa17-31d2-4a84-86a4-a7d200689a80/ports",
                    "originalSanServicesUri": "/rest/fc-sans/managed-sans/33d3fa17-31d2-4a84-86a4-a7d200689a80/san-services",
                    "originalSwitchesUri": "/rest/fc-sans/managed-sans/33d3fa17-31d2-4a84-86a4-a7d200689a80/switches",
                    "originalModified": "2017-12-06T07:31:35.000Z",
                    "appluri": "/rest/appliances/736e8bd0-4a40-4b5c-a82a-47cbe921993c",
                    "originalDeviceManagerUri": "/rest/fc-sans/device-managers/4a02478f-71f1-4561-a488-a7b20129f40c",
                    "originalZonesUri": "/rest/fc-sans/managed-sans/33d3fa17-31d2-4a84-86a4-a7d200689a80/zones",
                    "originalCreated": "2017-08-17T06:20:50.000Z",
                    "originalUri": "/rest/fc-sans/managed-sans/33d3fa17-31d2-4a84-86a4-a7d200689a80",
                    "originalDeviceManagersUri": "/rest/fc-sans/managed-sans/33d3fa17-31d2-4a84-86a4-a7d200689a80/device-managers"
                  }
                ],
                "applOwners": [
                  {
                    "applianceLocation": "172.1.1.11",
                    "originalStatus": "OK",
                    "applianceName": "ci-005056b3524e",
                    "appluri": "/rest/appliances/736e8bd0-4a40-4b5c-a82a-47cbe921993c",
                    "currentApiVersion": 500,
                    "originalUri": "/rest/fc-sans/managed-sans/33d3fa17-31d2-4a84-86a4-a7d200689a80"
                  }
                ],
                "description": null,
                "id": "e3f2d88b-3302-45a9-be3d-55b8dc71604d",
                "groups": []
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/appliance/network-interfaces": {
      "post": {
        "summary": "Configures network interfaces",
        "description": "Configures the network interfaces of the appliance.\nRefer to OneView API docs for request body schema.\n",
        "tags": [
          "Network Interfaces"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1groups~1/post/parameters/2"
          },
          {
            "name": "network",
            "description": "Refer to POST '/rest/appliance/network-interfaces' in OneView API docs.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "applianceNetworks": [
                  {
                    "interfaceName": "Appliance",
                    "device": "eth0",
                    "macAddress": "00:50:56:b3:5f:a5",
                    "ipv4Type": "DHCP",
                    "ipv6Type": "UNCONFIGURE",
                    "overrideIpv4DhcpDnsServers": true,
                    "overrideIpv6DhcpDnsServers": false,
                    "confOneNode": true,
                    "activeNode": 1,
                    "hostname": "ci-005056b343ec.example.com",
                    "app1Ipv4Addr": null,
                    "app2Ipv4Addr": null,
                    "virtIpv4Addr": null,
                    "ipv4Subnet": null,
                    "ipv4Gateway": null,
                    "app1Ipv6Addr": "",
                    "app2Ipv6Addr": null,
                    "virtIpv6Addr": null,
                    "ipv6Subnet": "",
                    "ipv6Gateway": "",
                    "app1Ipv4Alias": null,
                    "app2Ipv4Alias": null,
                    "app1Ipv6Alias": "",
                    "app2Ipv6Alias": null,
                    "domainName": null,
                    "searchDomains": null,
                    "ipv4NameServers": [],
                    "ipv6NameServers": [],
                    "bondedTo": null,
                    "unconfigure": false,
                    "aliasDisabled": false
                  }
                ],
                "type": "ApplianceNetworkConfiguration"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The absolute URI of a task created to perform the requested action."
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/paths/~1rest~1tasks/get/responses/401/schema"
            },
            "examples": {
              "application/json": {
                "errorCode": "SET_NETWORKSETTINGS_ERR",
                "message": "Start set network settings failed.",
                "recommendedActions": [
                  "Contact support team for help."
                ],
                "details": null,
                "errorSource": null,
                "nestedErrors": [],
                "data": [],
                "canForce": false
              }
            }
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "403": {
            "$ref": "#/paths/~1rest~1groups~1/post/responses/403"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      },
      "get": {
        "summary": "get network interfaces configuration",
        "tags": [
          "Network Interfaces"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/rest/san-managers": {
      "get": {
        "summary": "Returns san-managers list",
        "description": "Returns san-managers list by query.",
        "tags": [
          "SAN Managers"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/7"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "san-managers"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1san-managers~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/san-managers/{id}": {
      "get": {
        "summary": "Returns a SAN manager",
        "description": "Returns an existing SAN manager identified by its unique ID.",
        "tags": [
          "SAN Managers"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of the SAN manager.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "applOwners": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "appluri": {
                            "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/appluri"
                          },
                          "applianceLocation": {
                            "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/applianceLocation"
                          },
                          "applianceName": {
                            "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/applianceName"
                          },
                          "originalUri": {
                            "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/originalUri"
                          },
                          "originalStatus": {
                            "type": "string",
                            "description": "The original status of the resource."
                          }
                        }
                      }
                    },
                    "groups": {
                      "$ref": "#/paths/~1rest~1appliances/post/responses/202/schema/properties/groups"
                    },
                    "id": {
                      "$ref": "#/paths/~1rest~1resource-alerts~1%7Bid%7D/get/responses/200/schema/properties/id"
                    }
                  }
                },
                {
                  "type": "object"
                }
              ],
              "properties": {
                "category": {
                  "type": "string",
                  "description": "Category for this resource.",
                  "enum": [
                    "san-managers"
                  ]
                },
                "created": {
                  "type": "string",
                  "description": "Timestamp when the resource was created."
                },
                "description": {
                  "type": "string",
                  "description": "SAN manager description (e.g. Brocade Network Advisor, Switch model, ect...)."
                },
                "deviceManagerUrl": {
                  "type": "string",
                  "description": "URL use to bring up the SAN manager user interface."
                },
                "deviceManagerVersion": {
                  "type": "string",
                  "description": "SAN manager version (e.g. 11.1.4 or 12.0.0)."
                },
                "eTag": {
                  "type": "string",
                  "description": "Unique identifier for this resource as it stands currently this value will change when the resource is modified."
                },
                "isInternal": {
                  "type": "boolean",
                  "description": "A flag indicating if the resource is managed by an internal SAN manager."
                },
                "managedSansUri": {
                  "type": "string",
                  "description": "Helper URI for retrieving a list of SANs managed by this SAN manager."
                },
                "modified": {
                  "type": "string",
                  "description": "Timestamp when the resource was modified."
                },
                "name": {
                  "type": "string",
                  "description": "SAN manager name (e.g. hostname or IP address)."
                },
                "providerDisplayName": {
                  "type": "string",
                  "description": "SAN provider display name (e.g. HPE B-series/Brocade Network Advisor)."
                },
                "providerUri": {
                  "type": "string",
                  "description": "SAN provider used to identify the provider this connection belongs to."
                },
                "refreshState": {
                  "type": "string",
                  "description": "Refresh substate of the resource.",
                  "enum": [
                    "RefreshPending",
                    "Refreshing",
                    "Stable",
                    "Unknown"
                  ]
                },
                "state": {
                  "type": "string",
                  "description": "State of the resource as defined by the state enum.",
                  "enum": [
                    "ConfigurationPending",
                    "Configured",
                    "Configuring",
                    "Deleting",
                    "Discovered",
                    "Managed",
                    "Removing"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Status of the resource as defined by the status enum.",
                  "enum": [
                    "Critical",
                    "Disabled",
                    "OK",
                    "Unknown",
                    "Warning"
                  ]
                },
                "type": {
                  "type": "string",
                  "description": "Resource type represented by this resource."
                },
                "unimportedSansUri": {
                  "type": "string",
                  "description": "Helper URI for discovering sans as of yet unmanaged by this SAN manager."
                },
                "uri": {
                  "type": "string",
                  "description": "Static identifier for this resource."
                }
              },
              "example": {
                "uri": "/rest/san-managers/8e740999-6e73-4e4f-a09b-03167c5fd542",
                "name": "172.18.15.1",
                "type": "FCDeviceManagerV2",
                "state": "Managed",
                "status": "Critical",
                "category": "san-managers",
                "created": "2017-01-12T01:41:02.000Z",
                "description": "Brocade Network Advisor",
                "deviceManagerUrl": "",
                "deviceManagerVersion": "",
                "eTag": "1946",
                "isInternal": false,
                "managedSansUri": "/rest/fc-sans/device-managers/e3783170-147f-4f30-a680-a6f9001bc08f/managed-sans",
                "modified": "2017-12-06T07:25:13.000Z",
                "providerDisplayName": "Brocade Network Advisor",
                "providerUri": "/rest/fc-sans/providers/0aa1f4e1-3b5e-4233-af1a-f849dc64da69",
                "refreshState": "Stable",
                "unimportedSansUri": "/rest/fc-sans/device-managers/e3783170-147f-4f30-a680-a6f9001bc08f/unimported-sans",
                "applOwners": [
                  {
                    "applianceLocation": "172.1.1.11",
                    "originalStatus": "OK",
                    "applianceName": "ci-005056b3524e",
                    "appluri": "/rest/appliances/736e8bd0-4a40-4b5c-a82a-47cbe921993c",
                    "originalUri": "/rest/fc-sans/device-managers/9f070167-0b7c-4ae0-ae2e-a7b5001770a8"
                  },
                  {
                    "applianceLocation": "172.1.1.51",
                    "originalStatus": "Critical",
                    "applianceName": "ci-005056b3524e",
                    "appluri": "/rest/appliances/93f14c7f-5165-403f-a839-41627a392e3f",
                    "originalUri": "/rest/fc-sans/device-managers/e3783170-147f-4f30-a680-a6f9001bc08f"
                  }
                ],
                "id": "8e740999-6e73-4e4f-a09b-03167c5fd542",
                "groups": [
                  {
                    "name": "group-lab",
                    "uri": "/rest/groups/6a437a4a-1c6f-4a86-b9b7-581ea85b5b27"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/server-firmware": {
      "get": {
        "summary": "Returns server-firmware list",
        "description": "Returns server-firmware list by query.",
        "tags": [
          "Server Firmware"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/7"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "server-firmware"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1server-firmware~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/server-firmware/{id}": {
      "get": {
        "summary": "Returns a server firmware",
        "description": "Returns an existing server firmware identified by its unique ID.",
        "tags": [
          "Server Firmware"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of server firmware.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures~1%7Bid%7D/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Identifies the resource type.",
                      "enum": [
                        "server-firmware"
                      ]
                    },
                    "created": {
                      "type": "string",
                      "description": "Date and time when the resource was created."
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of the firmware."
                    },
                    "eTag": {
                      "type": "string",
                      "description": "Entity tag/version ID of the resource, the same value that is returned in the ETag header on a GET of the resource."
                    },
                    "location": {
                      "type": "string",
                      "description": "The location of the firmware."
                    },
                    "modified": {
                      "type": "string",
                      "description": "Date and time when the resource was last modified."
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the firmware."
                    },
                    "serverHardwareUri": {
                      "type": "string",
                      "description": "URI of the server hardware."
                    },
                    "serverModel": {
                      "type": "string",
                      "description": "Model of the server."
                    },
                    "serverName": {
                      "type": "string",
                      "description": "Name of the server."
                    },
                    "state": {
                      "type": "string",
                      "description": "State of the server firmware inventory:wether completely collected or partially collected.",
                      "enum": [
                        "Failed",
                        "Supported",
                        "Unsupported"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "description": "General status."
                    },
                    "type": {
                      "type": "string",
                      "description": "Uniquely identifies the type of the JSON object."
                    },
                    "uri": {
                      "type": "string",
                      "description": "The canonical URI of the resource."
                    },
                    "version": {
                      "type": "string",
                      "description": "Version of the firmware."
                    }
                  }
                }
              ],
              "example": {
                "name": "System ROM",
                "description": null,
                "location": "System Board",
                "state": "Unsupported",
                "status": "Unknown",
                "version": "I31 09/30/2011",
                "serverName": "Encl1, bay 5",
                "serverModel": "ProLiant BL460c Gen8",
                "serverHardwareUri": "/rest/server-hardware/37333036-3831-4753-4831-30325838524E",
                "uri": "/rest/server-firmware/f7c6d58f-72b2-425f-a85b-9263c9e0640d",
                "type": "server-hardware-firmware-1",
                "category": "server-firmware",
                "created": "2017-11-15T13:05:47.619Z",
                "modified": "2017-11-15T13:05:47.620Z",
                "eTag": null,
                "groups": [],
                "id": "f7c6d58f-72b2-425f-a85b-9263c9e0640d",
                "originalUri": "/rest/server-hardware/37333036-3831-4753-4831-30325838524E#System ROM#System Board",
                "appluri": "/rest/appliances/0c77be5f-1d51-4ad4-984e-9dcd5fc050a1",
                "applianceName": "ci-005056b3524e",
                "applianceLocation": "172.1.1.253"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/server-hardware": {
      "get": {
        "summary": "Returns server-hardware list",
        "description": "Returns server-hardware list by query.",
        "tags": [
          "Server Hardware"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/7"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "server-hardware"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1server-hardware~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/server-hardware/{id}": {
      "get": {
        "summary": "Returns a server hardware",
        "description": "Returns an existing server hardware identified by its unique ID.",
        "tags": [
          "Server Hardware"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of server hardware.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures~1%7Bid%7D/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "assetTag": {
                      "type": "string",
                      "description": "The current value of the asset tag for this server hardware. This value can be set in the server hardware's BIOS interface."
                    },
                    "category": {
                      "type": "string",
                      "description": "Resource category used for authorizations and resource type groupings",
                      "enum": [
                        "server-hardware"
                      ]
                    },
                    "created": {
                      "type": "string",
                      "description": "Date and time when the resource was created"
                    },
                    "description": {
                      "type": "string",
                      "description": "Brief description of the resource"
                    },
                    "eTag": {
                      "type": "string",
                      "description": "Entity tag/version ID of the resource, the same value that is returned in the ETag header on a GET of the resource"
                    },
                    "formFactor": {
                      "type": "string",
                      "description": "The physical dimensions of this server. For a blade server this is either HalfHeight or FullHeight. For a rack server this is expressed in U height, e.g. 4U."
                    },
                    "hostOsType": {
                      "type": "integer",
                      "description": "The type of Operating System installed on the server as reported by the iLO. The iLO gets this information from a running operating system that has monitoring software installed, like Agentless Management Service."
                    },
                    "licensingIntent": {
                      "enum": [
                        "None",
                        "OneView",
                        "OneViewNoiLO",
                        "OneViewStandard"
                      ],
                      "type": "string",
                      "description": "Product license assigned to the server hardware."
                    },
                    "locationUri": {
                      "type": "string",
                      "description": "For blade servers, the enclosure in which this blade server resides. This URI can be used to retrieve information about the enclosure. This value is not set for rack mount servers."
                    },
                    "memoryMb": {
                      "type": "integer",
                      "description": "Amount of memory installed on this server hardware (in megabytes)."
                    },
                    "model": {
                      "type": "string",
                      "description": "The full server hardware model string."
                    },
                    "modified": {
                      "type": "string",
                      "description": "Date and time when the resource was last modified"
                    },
                    "mpDnsName": {
                      "type": "string",
                      "description": "The DNS name for the Management Processor."
                    },
                    "mpFirmwareVersion": {
                      "type": "string",
                      "description": "The version of the firmware installed on the iLO."
                    },
                    "mpIpAddress": {
                      "type": "string",
                      "description": "The IP address for the Management Processor."
                    },
                    "mpModel": {
                      "type": "string",
                      "description": "The model type of the iLO, such as iLO4."
                    },
                    "mpState": {
                      "enum": [
                        "OK",
                        "Reset",
                        "Resetting"
                      ],
                      "type": "string",
                      "description": "Indicates the current state of the management processor."
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the server."
                    },
                    "partNumber": {
                      "type": "string",
                      "description": "The part number for this server hardware."
                    },
                    "physicalServerHardwareUri": {
                      "type": "string",
                      "description": "The URI of the collection of physical blades that make up the SDX hard partition this server hardware represents. This field is only relevant when working with SDX enclosures."
                    },
                    "position": {
                      "type": "integer",
                      "description": "For blade servers, the number of the physical enclosure bay in which the server hardware resides. For rack mount servers, this value is null."
                    },
                    "powerLock": {
                      "type": "string",
                      "description": "Indicates if an operation is being performed on this server hardware (such as a profile assignment) that prevents its power state from being manipulated via the server hardware API."
                    },
                    "powerState": {
                      "enum": [
                        "Off",
                        "On",
                        "PoweringOff",
                        "PoweringOn",
                        "Resetting",
                        "Unknown"
                      ],
                      "type": "string",
                      "description": "Current power state of the server hardware. Values are Unknown, On, Off, PoweringOn, PoweringOff or Resetting."
                    },
                    "processorCoreCount": {
                      "type": "integer",
                      "description": "Number of cores available per processor."
                    },
                    "processorCount": {
                      "type": "integer",
                      "description": "Number of processors installed on this server hardware."
                    },
                    "processorSpeedMhz": {
                      "type": "integer",
                      "description": "Speed of the CPUs in megahertz."
                    },
                    "processorType": {
                      "type": "string",
                      "description": "Type of CPU installed on this server hardware."
                    },
                    "refreshState": {
                      "enum": [
                        "NotRefreshing",
                        "RefreshFailed",
                        "RefreshPending",
                        "Refreshing"
                      ],
                      "type": "string",
                      "description": "Indicates if the resource is currently refreshing. Possible values are NotRefreshing, RefreshPending, Refreshing, and RefreshFailed"
                    },
                    "romVersion": {
                      "type": "string",
                      "description": "The version of the server hardware firmware (ROM). After updating the ROM (BIOS) firmware for a server, the server hardware page and the REST API may report an inaccurate ROM version until the server is next powered on and allowed to complete the power-on self-test (POST)."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Serial number of the server hardware."
                    },
                    "serverGroupUri": {
                      "type": "string",
                      "description": "For blade servers, this is the URI of the containing enclosure's enclosure group. This URI can be used to retrieve information about the enclosure group or to identify all the servers in the same group. This value is not set for rack mount servers."
                    },
                    "serverHardwareTypeUri": {
                      "type": "string",
                      "description": "URI of the server hardware type associated with the server hardware. This URI can be used to retrieve information about the server hardware type."
                    },
                    "serverName": {
                      "type": "string",
                      "description": "The name of the server as reported by the iLO. The iLO gets this information from a running operating system that has monitoring software installed, like Agentless Management Service."
                    },
                    "serverProfileUri": {
                      "type": "string",
                      "description": "URI of a server profile assigned to this server hardware, if one is assigned. If not assigned this value is null."
                    },
                    "shortModel": {
                      "type": "string",
                      "description": "Short version of the server hardware model string, typically something like BL460 Gen8."
                    },
                    "state": {
                      "type": "string",
                      "description": "The current resource state of the server hardware.",
                      "enum": [
                        "Unknown",
                        "Adding",
                        "NoProfileApplied",
                        "Monitored",
                        "Unmanaged",
                        "Removing",
                        "RemoveFailed",
                        "Removed",
                        "ApplyingProfile",
                        "ProfileApplied",
                        "RemovingProfile",
                        "ProfileError",
                        "Unsupported",
                        "UpdatingFirmware"
                      ]
                    },
                    "stateReason": {
                      "type": "string",
                      "description": "The reason for the current resource state of the server hardware. This only applies if the state is 'Unmanaged', otherwise it is set to 'NotApplicable'.",
                      "enum": [
                        "Unsupported",
                        "UpdatingFirmware",
                        "NotApplicable",
                        "NotOwner",
                        "Unconfigured",
                        "UnsupportedFirmware",
                        "Interrupted (when PhysicalServerState is a result of an operation that was terminated before completing)",
                        "CommunicationError"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "description": "Overall health status of the resource."
                    },
                    "type": {
                      "type": "string",
                      "description": "Uniquely identifies the type of the JSON object"
                    },
                    "uidState": {
                      "enum": [
                        "Blinking",
                        "Off",
                        "On",
                        "Unsupported"
                      ],
                      "type": "string",
                      "description": "PhysicalServerUidState."
                    },
                    "uri": {
                      "type": "string",
                      "description": "The canonical URI of the resource"
                    },
                    "uuid": {
                      "type": "string",
                      "description": "Universally Unique ID (UUID) of the server hardware."
                    },
                    "virtualSerialNumber": {
                      "type": "string",
                      "description": "Virtual serial number associated with this server hardware (if specified in the profile assigned to this server)."
                    },
                    "virtualUuid": {
                      "type": "string",
                      "description": "Virtual UUID associated with this server hardware (if specified in the profile assigned to this server)."
                    }
                  }
                }
              ],
              "example": {
                "type": "server-hardware-7",
                "name": "Encl1, bay 1",
                "serverName": "",
                "state": "ProfileApplied",
                "stateReason": "NotApplicable",
                "assetTag": "[Unknown]",
                "category": "server-hardware",
                "created": "2017-07-16T22:08:19.816Z",
                "description": null,
                "eTag": "1505729209522",
                "formFactor": "FullHeight",
                "hostOsType": null,
                "licensingIntent": "OneView",
                "locationUri": "/rest/enclosures/09SGH100X6J1",
                "memoryMb": 16384,
                "model": "ProLiant BL660c Gen9",
                "modified": "2017-09-18T10:06:49.522Z",
                "mpFirmwareVersion": "2.20 Nov 01 2014",
                "mpModel": "iLO4",
                "mpState": "OK",
                "partNumber": "679118-B21",
                "physicalServerHardwareUri": null,
                "position": 1,
                "powerLock": false,
                "powerState": "Off",
                "processorCoreCount": 8,
                "processorCount": 4,
                "processorSpeedMhz": 2000,
                "processorType": "Quad-Core Intel Xeon @ 2.0GHz",
                "refreshState": "NotRefreshing",
                "romVersion": "I38 v1.30",
                "serialNumber": "SGH100X7RN",
                "serverGroupUri": "/rest/enclosure-groups/b43512bd-4ba9-4438-bdf5-812ad394bbb9",
                "serverHardwareTypeUri": "/rest/server-hardware-types/1987B1BF-245A-434A-9AAC-C4B76931BE9D",
                "serverProfileUri": "/rest/server-profiles/a00c15ea-f98d-4e8e-b253-6fd4288ab4c8",
                "shortModel": "BL660c Gen9",
                "status": "Warning",
                "uidState": "Unsupported",
                "uri": "/rest/server-hardware/660b26ce-8201-4484-9fcb-2fd16c977e40",
                "uuid": "31393736-3831-4753-4831-30305837524E",
                "virtualSerialNumber": "VCG7DO6000",
                "virtualUuid": "a00c15ea-f98d-4e8e-b253-6fd4288ab4c8",
                "mpDnsName": "172.18.6.1",
                "mpIpAddress": "172.18.6.1",
                "groups": [
                  {
                    "name": "group-lab",
                    "uri": "/rest/groups/96c3af19-b928-4719-96dc-4e51e3dc51fb"
                  }
                ],
                "id": "660b26ce-8201-4484-9fcb-2fd16c977e40",
                "originalUri": "/rest/server-hardware/31393736-3831-4753-4831-30305837524E",
                "appluri": "/rest/appliances/7df6c7fb-8d5d-4fef-94ea-cc29799c44cc",
                "applianceName": "ci-005056b3524e",
                "applianceLocation": "172.1.1.11"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/server-hardware/{id}/iloSsoUrl": {
      "get": {
        "summary": "Returns single sign-on URI of iLO in the server-hardware",
        "description": "Returns single sign-on URI of the iLO server hardware identified by its unique ID.",
        "tags": [
          "Server Hardware"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of server hardware.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "ssoUrl": {
                  "type": "string",
                  "description": "The URI to Single Sign On (SSO) iLO"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/server-profiles": {
      "get": {
        "summary": "Returns server-profiles list",
        "description": "Returns server-profiles list by query.",
        "tags": [
          "Server Profiles"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/7"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "server-profiles"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1server-profiles~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/server-profiles/{id}": {
      "get": {
        "summary": "Returns a server profile",
        "description": "Returns an existing server profile identified by its unique ID.",
        "tags": [
          "Server Profiles"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of server profile.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures~1%7Bid%7D/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "affinity": {
                      "enum": [
                        "Bay",
                        "BayAndServer"
                      ],
                      "type": "string",
                      "description": "This identifies the behavior of the server profile when the server hardware is removed or replaced.  This can be set to Bay or BayAndServer."
                    },
                    "associatedServer": {
                      "type": "string",
                      "description": "The server hardware serial number where the profile is pinned to when the affinity for the profile is set to BayAndServer."
                    },
                    "boot": {
                      "type": "string",
                      "description": "Determines the order in which boot will be attempted on the available devices. For a Gen 9 BL server hardware boot.manageBoot cannot be set to true unless bootMode is specified and bootMode.manageMode is set to 'true'."
                    },
                    "category": {
                      "type": "string",
                      "description": "Identifies the resource category. This field should always be set to 'server-profiles'.",
                      "enum": [
                        "server-profiles"
                      ]
                    },
                    "connectionSettings": {
                      "type": "object",
                      "description": "The profile connections configuration.",
                      "properties": {
                        "manageConnections": {
                          "type": "boolean",
                          "description": "Identifies whether connections should be managed by server profile."
                        },
                        "connections": {
                          "type": "array",
                          "description": "List of network connections to be configured for the server.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "boot": {
                                "type": "object",
                                "description": "Indicates that the server will attempt to boot from this connection. This object can only be specified if \"boot.manageBoot\" is set to 'true'. If the boot order is 'PXE' and the boot mode is 'UEFI', then there cannot be both iSCSI and PXE connections. If the boot order is 'HardDisk', then PXE connections will be configured to boot, but there will be no attempt to place them in the correct order.",
                                "properties": {
                                  "priority": {
                                    "type": "string",
                                    "description": "Indicates the boot priority for this connection. When defining a Secondary connection, a Primary connection must be defined of the same function type. When more than one Primary connection is defined, the 'order' attribute controls the ordering among the connections. Only one Primary/Secondary connection pair of hard disk storage category (iSCSI, FibreChannel, Ethernet with iSCSI targets, or local storage) may be defined. In addition, only one Primary/Secondary pair of PXE connections may be defined."
                                  }
                                }
                              },
                              "deploymentStatus": {
                                "type": "string",
                                "description": "Status of deployment."
                              },
                              "functionType": {
                                "type": "string",
                                "description": "Type of function required for the connection. functionType cannot be modified after the connection is created."
                              },
                              "id": {
                                "type": "integer",
                                "description": "A unique identifier for this connection. When creating or editing a profile, an id is automatically assigned if the attribute is omitted or 0 is specified. When editing a profile, a connection is created if the id does not identify an existing connection."
                              },
                              "interconnectUri": {
                                "type": "string",
                                "description": "The interconnectUri associated with the connection."
                              },
                              "mac": {
                                "type": "string",
                                "description": "The MAC address that is currently programmed on the FlexNic. The value can be a virtual MAC, user defined MAC or physical MAC read from the device. It cannot be modified after the connection is created."
                              },
                              "macType": {
                                "type": "string",
                                "description": "Specifies the type of MAC address to be programmed into the IO Devices. The value can be 'Virtual', 'Physical' or 'UserDefined'. If the connection's macType and mac are omitted in the Ethernet connection, then the connection's macType is set to the profile's default macType. This value cannot be modified after the connection is created."
                              },
                              "name": {
                                "type": "string",
                                "description": "A string used to identify the respective connection. The connection name is case insensitive, limited to 63 characters and must be unique within the profile."
                              },
                              "networkUri": {
                                "type": "string",
                                "description": "Identifies the network or network set to be connected. Use GET /rest/server-profiles/available-networks to retrieve the list of available Ethernet networks, Fibre Channel networks and network sets that are available along with their respective ports."
                              },
                              "wwnn": {
                                "type": "string",
                                "description": "The node WWN address that is currently programmed on the FlexNic. The value can be a virtual WWNN, user defined WWNN or physical WWNN read from the device. It cannot be modified after the connection is created."
                              },
                              "wwpn": {
                                "type": "string",
                                "description": "The port WWN address that is currently programmed on the FlexNIC. The value can be a virtual WWPN, user defined WWPN or the physical WWPN read from the device. It cannot be modified after the connection is created."
                              },
                              "wwpnType": {
                                "type": "string",
                                "description": "Specifies the type of WWN address to be porgrammed on the FlexNIC. The value can be 'Virtual', 'Physical' or 'UserDefined'. If the WWPN, WWNN, MAC, connection's macType and connection's wwpnType are omitted in the FC connection, then the connection's macType and connection's wwpnType are set to the profile's default macType and profile's default wwnnType. This value cannot be modified after the connection is created."
                              }
                            }
                          }
                        }
                      }
                    },
                    "created": {
                      "type": "string",
                      "description": "The time that the Server Profile was created"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of this Server Profile"
                    },
                    "eTag": {
                      "type": "string",
                      "description": "Ensures that multiple updates do not unintentionally overwrite each other's changes. This value is automatically generated during profile creation and updated each time the profile is edited. The value should not be modified by the client."
                    },
                    "enclosureBay": {
                      "type": "integer",
                      "description": "Identifies the enclosure device bay number that the Server Profile is currently assgined to, if applicable. Use GET /rest/server-profiles/available-targets to retrieve the list of available enclosure bays that a profile can be assigned to."
                    },
                    "enclosureGroupName": {
                      "type": "string",
                      "description": "Name of the enclosure group."
                    },
                    "enclosureGroupUri": {
                      "type": "string",
                      "description": "Identifies the enclosure group for which the Server Profile was designed. The enclosureGroupUri is determined when the profile is created. Use GET /rest/enclosure-groups to retrieve the list of enclosure groups."
                    },
                    "enclosureUri": {
                      "type": "string",
                      "description": "Identifies the enclosure that the Server Profile is currently assgined to, if applicable. Use GET /rest/server-profiles/available-targets to retrieve the list of available enclosures that a profile can be assigned to."
                    },
                    "firmware": {
                      "type": "object",
                      "description": "Defines and enables firmware baseline management.",
                      "properties": {
                        "firmwareBaselineUri": {
                          "type": "string",
                          "description": "Identifies the firmware baseline to be applied to the server hardware. Server firmware is not modified if 'manageFirmware' is false."
                        },
                        "manageFirmware": {
                          "type": "string",
                          "description": "Indicates that the server firmware is configured using the server profile. Value can be 'true' or 'false'."
                        },
                        "forceInstallFirmware": {
                          "type": "string",
                          "description": "Force installation of firmware even if same or newer version is installed.   Downgrading the firmware can result in the installation of unsupported firmware and cause server hardware to cease operation.  Value can be 'true' or 'false'."
                        },
                        "firmwareInstallType": {
                          "enum": [
                            "FirmwareAndOSDrivers",
                            "FirmwareOnly",
                            "FirmwareOnlyOfflineMode"
                          ],
                          "type": "string",
                          "description": "Specifies the way a Service Pack for ProLiant (SPP) is installed. This field is used if the 'manageFirmware' field is true."
                        }
                      }
                    },
                    "macType": {
                      "enum": [
                        "Physical",
                        "UserDefined",
                        "Virtual"
                      ],
                      "type": "string",
                      "description": "Specifies the type of MAC address to be programmed into the IO devices. The value can be 'Virtual' or 'Physical'. It cannot be modified after the profile is created."
                    },
                    "modified": {
                      "type": "string",
                      "description": "The time that the Server Profile was most recently modified"
                    },
                    "name": {
                      "type": "string",
                      "description": "Unique display name of this Server Profile."
                    },
                    "osDeploymentSettings": {
                      "type": "object",
                      "description": "OS deployment settings applicable when deployment is invoked through server profile. When OS deployment settings is enabled, there must be a boot enabled profile connection configured on a boot capable port with deployment network and boot mode must be either UEFI or UEFIOptimized. Further, if the logical enclosure contains more than one enclosure, two such connections one for primary and another for secondary must be configured.",
                      "properties": {
                        "osDeploymentPlanUri": {
                          "type": "string",
                          "description": "Identifies the OS deployment plan. Use GET /rest/os-deployment-plans to retrieve the list of available OS deployment plans."
                        },
                        "osDeploymentPlanName": {
                          "type": "string",
                          "description": "Name of the OS deployment plan."
                        }
                      }
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "A 10-byte value that is exposed to the Operating System as the server hardware's Serial Number. The value can be a virtual serial number, user defined serial number or physical serial number read from the server's ROM. It cannot be modified after the profile is created."
                    },
                    "serialNumberType": {
                      "enum": [
                        "Physical",
                        "UserDefined",
                        "Virtual"
                      ],
                      "type": "string",
                      "description": "Specifies the type of Serial Number and UUID to be programmed into the server ROM. The value can be 'Virtual', 'UserDefined', or 'Physical'. The serialNumberType defaults to 'Virtual' when serialNumber or uuid are not specified. It cannot be modified after the profile is created."
                    },
                    "serverHardwareTypeName": {
                      "type": "string",
                      "description": "Name of the server hardware type."
                    },
                    "serverHardwareTypeUri": {
                      "type": "string",
                      "description": "Identifies the server hardware type for which the Server Profile was designed. The serverHardwareTypeUri is determined when the profile is created. Use GET /rest/server-hardware-types to retrieve the list of server hardware types."
                    },
                    "serverHardwareUri": {
                      "type": "string",
                      "description": "Identifies the server hardware to which the server profile is currently assigned, if applicable. Use GET /rest/server-profiles/available-targets to retrieve the list of available servers."
                    },
                    "serverName": {
                      "type": "string",
                      "description": "Name of the server."
                    },
                    "serverProfileTemplateUri": {
                      "type": "string",
                      "description": "Identifies the Server profile template the Server Profile is based on. Use GET /rest/server-profile-templates to retrieve the list of server profile templates."
                    },
                    "state": {
                      "type": "string",
                      "description": "Current State of this Server Profile"
                    },
                    "status": {
                      "type": "string",
                      "description": "Overall health status of this Server Profile"
                    },
                    "taskUri": {
                      "type": "string",
                      "description": "URI of the task currently executing or most recently executed on this server profile."
                    },
                    "templateCompliance": {
                      "enum": [
                        "Compliant",
                        "NonCompliant",
                        "Unknown"
                      ],
                      "type": "string",
                      "description": "The compliance state of the server profile with the server profile template."
                    },
                    "type": {
                      "type": "string",
                      "description": "Identifies the resource type. This field should always be set to 'ServerProfileV6'."
                    },
                    "uri": {
                      "type": "string",
                      "description": "URI of this Server Profile. The URI is automatically generated when the server profile is created and cannot be modified."
                    },
                    "uuid": {
                      "type": "string",
                      "description": "A 36-byte value that is exposed to the Operating System as the server hardware's UUID. The value can be a virtual UUID, user defined UUID or physical UUID read from the server's ROM. It cannot be modified after the profile is created."
                    },
                    "wwnType": {
                      "enum": [
                        "Physical",
                        "UserDefined",
                        "Virtual"
                      ],
                      "type": "string",
                      "description": "Specifies the type of WWN address to be programmed into the IO devices. The value can be 'Virtual' or 'Physical'. It cannot be modified after the profile is created."
                    }
                  }
                }
              ],
              "example": {
                "type": "ServerProfileV6",
                "uri": "/rest/server-profiles/1f4fd371-b0b3-43aa-9629-f3f777156f6b",
                "name": "sp03",
                "description": "",
                "serialNumber": "VCG7DO6002",
                "uuid": "386613a9-7a99-4c5e-b9bd-dd90e1b46830",
                "serverProfileTemplateUri": null,
                "templateCompliance": "Unknown",
                "serverHardwareUri": "/rest/server-hardware/37333036-3831-4753-4831-30305838524E",
                "serverHardwareTypeUri": "/rest/server-hardware-types/675B98A1-B171-4D9E-8A16-5F80F0B1E61B",
                "enclosureGroupUri": "/rest/enclosure-groups/b43512bd-4ba9-4438-bdf5-812ad394bbb9",
                "enclosureUri": "/rest/enclosures/09SGH100X6J1",
                "enclosureBay": 3,
                "affinity": "Bay",
                "associatedServer": null,
                "firmware": {
                  "firmwareInstallType": null,
                  "forceInstallFirmware": false,
                  "manageFirmware": false,
                  "firmwareBaselineUri": null
                },
                "macType": "Virtual",
                "wwnType": "Virtual",
                "serialNumberType": "Virtual",
                "category": "server-profiles",
                "created": "20170717T185113.977Z",
                "modified": "20170721T001725.706Z",
                "status": "Critical",
                "state": "Normal",
                "taskUri": "/rest/tasks/287240EB-1764-4B5C-8017-89D31E8E8873",
                "boot": {
                  "order": [],
                  "manageBoot": false,
                  "manageBios": false
                },
                "osDeploymentSettings": null,
                "eTag": "1500317475560/7",
                "connectionSettings": {
                  "manageConnections": true,
                  "connections": []
                },
                "groups": [],
                "id": "1f4fd371-b0b3-43aa-9629-f3f777156f6b",
                "originalUri": "/rest/server-profiles/386613a9-7a99-4c5e-b9bd-dd90e1b46830",
                "appluri": "/rest/appliances/7df6c7fb-8d5d-4fef-94ea-cc29799c44cc",
                "applianceName": "ci-005056b3524e",
                "applianceLocation": "172.1.1.221",
                "serverName": "",
                "serverHardwareTypeName": "BL460c Gen8 1",
                "enclosureGroupName": "eg1"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/server-profile-templates": {
      "get": {
        "summary": "Returns server-profile-templates list",
        "description": "Returns server-profile-templates list by query.",
        "tags": [
          "Server Profile Templates"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/7"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "server-profile-templates"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1server-profile-templates~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/server-profile-templates/{id}": {
      "get": {
        "summary": "Returns a server profile template",
        "description": "Returns an existing server profile template identified by its unique ID.",
        "tags": [
          "Server Profile Templates"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of server profile template.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures~1%7Bid%7D/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "affinity": {
                      "type": "string",
                      "description": "This identifies the behavior of the server profiles created from this template when the server hardware is removed or replaced. This can be set to Bay or BayAndServer."
                    },
                    "boot": {
                      "type": "string",
                      "description": "Determines the order in which boot will be attempted on the available devices. For a Gen9 BL server hardware type boot.manageBoot cannot be set to true unless bootMode is specified and bootMode.manageMode is set to 'true'."
                    },
                    "category": {
                      "type": "string",
                      "description": "Identifies the resource category. This field should always be set to 'server-profile-templates'.",
                      "enum": [
                        "server-firmware-templates"
                      ]
                    },
                    "connectionSettings": {
                      "type": "object",
                      "description": "The profile connections configuration.",
                      "properties": {
                        "manageConnections": {
                          "type": "boolean",
                          "description": "Identifies whether connections should be managed by server profile template. If this is false then the compliance check between server profile template and server profile is disabled, this allows a server profile created from a profile template to define any connectivity."
                        },
                        "connections": {
                          "type": "array",
                          "description": "List of network connections to be configured for the server when manageConnections is true.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "A unique identifier for this connection. When creating or editing a profile template, an id is automatically assigned if the attribute is omitted or 0 is specified. When editing a profile template, a connection is created if the id does not identify an existing connection.",
                                "type": "integer"
                              },
                              "name": {
                                "type": "string",
                                "description": "A string used to identify the respective connection. The connection name is case insensitive, limited to 63 characters and must be unique within the profile."
                              },
                              "functionType": {
                                "type": "string",
                                "description": "Type of function required for the connection. functionType cannot be modified after the connection is created."
                              },
                              "networkUri": {
                                "type": "string",
                                "description": "Identifies the network or network set to be connected. Use GET /rest/server-profiles/available-networks to retrieve the list of available Ethernet networks, Fibre Channel networks and network sets that are available along with their respective ports."
                              },
                              "boot": {
                                "type": "object",
                                "description": "Indicates that the server will attempt to boot from this connection. This object can only be specified if 'boot.manageBoot' is set to 'true'.",
                                "properties": {
                                  "priority": {
                                    "type": "string",
                                    "description": "Indicates the boot priority for this device. PXE and Fibre Channel connections are treated separately; an Ethernet connection and a Fibre Channel connection can both be marked as Primary. The 'order' attribute controls ordering among the different device types."
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "created": {
                      "type": "string",
                      "description": "Date and time when the resource was created"
                    },
                    "description": {
                      "type": "string",
                      "description": "The description of this Server Profile Template."
                    },
                    "eTag": {
                      "type": "string",
                      "description": "Ensures that multiple updates do not unintentionally overwrite each other's changes. This value is automatically generated during profile template creation and updated each time the profile template is edited. The value should not be modified by the client."
                    },
                    "enclosureGroupName": {
                      "type": "string",
                      "description": "Name of the enclosure group."
                    },
                    "enclosureGroupUri": {
                      "type": "string",
                      "description": "Identifies the enclosure group for which the Server Profile Template was designed. The enclosureGroupUri is determined when the profile template is created. Use GET /rest/enclosure-groups to retrieve the list of enclosure groups."
                    },
                    "firmware": {
                      "type": "object",
                      "description": "Defines and enables firmware baseline management.",
                      "properties": {
                        "firmwareBaselineUri": {
                          "type": "string",
                          "description": "Identifies the firmware baseline to be applied to the server hardware."
                        },
                        "manageFirmware": {
                          "type": "string",
                          "description": "Indicates that the server firmware should be configured on the server profiles created from the template. Value can be 'true' or 'false'."
                        },
                        "forceInstallFirmware": {
                          "type": "string",
                          "description": "Force installation of firmware even if same or newer version is installed. Downgrading the firmware can result in the installation of unsupported firmware and cause server hardware to cease operation. Value can be 'true' or 'false'."
                        },
                        "firmwareInstallType": {
                          "type": "string",
                          "description": "Specifies the way a Service Pack for ProLiant (SPP) is installed. This field is used if the 'manageFirmware' field is true. Possible values are"
                        }
                      }
                    },
                    "macType": {
                      "type": "string",
                      "description": "Specifies the type of MAC address to be programmed into the IO devices. The value can be 'Virtual' or 'Physical'. It cannot be modified after the profile template is created."
                    },
                    "modified": {
                      "type": "string",
                      "description": "Date and time when the resource was last modified"
                    },
                    "name": {
                      "type": "string",
                      "description": "Unique display name of this Server Profile Template."
                    },
                    "osDeploymentSettings": {
                      "type": "object",
                      "description": "The OS deployment settings.",
                      "properties": {
                        "osDeploymentPlanUri": {
                          "type": "string",
                          "description": "URI of the OS deployment plan."
                        },
                        "osDeploymentPlanName": {
                          "type": "string",
                          "description": "Name of the OS deployment plan."
                        }
                      }
                    },
                    "serialNumberType": {
                      "type": "string",
                      "description": "Specifies the type of Serial Number and UUID to be programmed into the server ROM. The value can be 'Virtual' or 'Physical'. It cannot be modified after the profile template is created."
                    },
                    "serverHardwareTypeName": {
                      "type": "string",
                      "description": "Name of the server hardware type."
                    },
                    "serverHardwareTypeUri": {
                      "type": "string",
                      "description": "Identifies the server hardware type for which the Server Profile Template was designed. The serverHardwareTypeUri is determined when the profile template is created. Use GET /rest/server-hardware-types to retrieve the list of server hardware types."
                    },
                    "serverProfileDescription": {
                      "type": "string",
                      "description": "The description of the server profiles created from this template."
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the resource"
                    },
                    "status": {
                      "type": "string",
                      "description": "Overall health status of this Server Profile Template."
                    },
                    "type": {
                      "type": "string",
                      "description": "Uniquely identifies the type of the JSON object"
                    },
                    "uri": {
                      "type": "string",
                      "description": "URI of this Server Profile Template. The URI is automatically generated when the server profile template is created and cannot be modified."
                    },
                    "wwnType": {
                      "type": "string",
                      "description": "Specifies the type of WWN address to be programmed into the IO devices. The value can be 'Virtual' or 'Physical'. It cannot be modified after the profile template is created."
                    }
                  }
                }
              ],
              "example": {
                "type": "ServerProfileTemplateV3",
                "uri": "/rest/server-profile-templates/00cd46a9-7a57-4b74-a3eb-43205ce43f36",
                "name": "spt-BL460c Gen8 1",
                "description": "spt-BL460c Gen8 1",
                "serverProfileDescription": "",
                "serverHardwareTypeUri": "/rest/server-hardware-types/675B98A1-B171-4D9E-8A16-5F80F0B1E61B",
                "enclosureGroupUri": "/rest/enclosure-groups/b43512bd-4ba9-4438-bdf5-812ad394bbb9",
                "affinity": "Bay",
                "macType": "Virtual",
                "wwnType": "Virtual",
                "serialNumberType": "Virtual",
                "osDeploymentSettings": null,
                "firmware": {
                  "manageFirmware": true,
                  "firmwareInstallType": "FirmwareOnlyOfflineMode",
                  "forceInstallFirmware": false,
                  "firmwareBaselineUri": "/rest/firmware-drivers/SPP2016100_2016_1015_191",
                  "firmwareName": "Service Pack for ProLiant"
                },
                "connectionSettings": {
                  "manageConnections": true,
                  "connections": []
                },
                "boot": {
                  "manageBoot": true,
                  "order": [
                    "CD",
                    "USB",
                    "HardDisk",
                    "PXE",
                    "Floppy"
                  ],
                  "manageBios": false
                },
                "category": "server-profile-templates",
                "created": "2017-08-10T08:59:59.946Z",
                "modified": "2017-09-07T06:07:35.351Z",
                "status": "OK",
                "state": null,
                "eTag": "1504764455351/9",
                "groups": [],
                "id": "00cd46a9-7a57-4b74-a3eb-43205ce43f36",
                "originalUri": "/rest/server-profile-templates/5bf15171-5d07-4a91-8edb-fe66bf0519cd",
                "appluri": "/rest/appliances/7df6c7fb-8d5d-4fef-94ea-cc29799c44cc",
                "applianceName": "ci-005056b3524e",
                "applianceLocation": "172.1.1.221",
                "serverHardwareTypeName": "BL460c Gen8 1",
                "enclosureGroupName": "eg1"
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/storage-pools": {
      "get": {
        "summary": "Returns storage-pools list",
        "description": "Returns storage-pools list by query.",
        "tags": [
          "Storage Pools"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/7"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "storage-pools"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1storage-pools~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/storage-pools/{id}": {
      "get": {
        "summary": "Returns a storage pool",
        "description": "Returns an existing storage pool identified by its unique ID.",
        "tags": [
          "Storage Pools"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of storage pool.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1san-managers~1%7Bid%7D/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "allocatedCapacity": {
                      "type": "string",
                      "description": "Capacity allocated from the storage pool in bytes. For 3PAR, its the sum of Usr, Snp and Adm total capacities"
                    },
                    "category": {
                      "type": "string",
                      "description": "Resource category used for authorizations and resource type groupings"
                    },
                    "created": {
                      "type": "string",
                      "description": "Date and time when the resource was created"
                    },
                    "description": {
                      "type": "string",
                      "description": "Brief description of the resource"
                    },
                    "deviceSpecificAttributes": {
                      "type": "object",
                      "properties": {
                        "storeServ properties": {
                          "type": "object",
                          "properties": {
                            "uuid": {
                              "type": "string",
                              "description": "The UUID of the storage pool"
                            },
                            "domain": {
                              "type": "string",
                              "description": "The domain of the storage pool"
                            },
                            "deviceType": {
                              "type": "string",
                              "description": "The device type of the storage pool"
                            },
                            "capacityLimit": {
                              "type": "string",
                              "description": "The capacity limit of the storage pool"
                            },
                            "allocatedCapacity": {
                              "type": "string",
                              "properties": {
                                "totalAllocatedCapacity": {
                                  "type": "string",
                                  "description": "The total allocated capacity of the storage pool"
                                },
                                "volumesAlloacatedCapacity": {
                                  "type": "string",
                                  "description": "The volumes allocated capacity of the storage pool"
                                },
                                "snapshotAllocatedCapacity": {
                                  "type": "string",
                                  "description": "The snapshot allocated capacity of the storage pool"
                                }
                              },
                              "description": "The alloated capacity of the storage pool"
                            },
                            "supportedRAIDLevel": {
                              "type": "string",
                              "description": "The supportedRAIDLevel of the storage pool"
                            },
                            "capacityWarningLimit": {
                              "type": "string",
                              "description": "The capacityWarningLimit of the storage pool"
                            }
                          }
                        },
                        "storeVirtual properties": {
                          "type": "object",
                          "properties": {
                            "volumeCreationSpace": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "availableSpace": {
                                    "type": "string",
                                    "description": "The availableSpace of the storage pool"
                                  },
                                  "replicationLevel": {
                                    "type": "string",
                                    "description": "The replicationLevel of the storage pool"
                                  }
                                }
                              },
                              "description": "The volumeCreationSpace of the storage pool"
                            }
                          }
                        }
                      },
                      "description": "Device specific properties for the storage pool"
                    },
                    "eTag": {
                      "type": "string",
                      "description": "Entity tag/version ID of the resource, the same value that is returned in the ETag header on a GET of the resource"
                    },
                    "freeCapacity": {
                      "type": "string",
                      "description": "Free capacity available from the storage pool in bytes"
                    },
                    "infoForSpecificAppliances": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "appluri": {
                            "type": "string",
                            "description": "Uri of the appliance"
                          },
                          "originalStorageSystemUri": {
                            "type": "string",
                            "description": "Uri of the original storage system in which the storage pool is present"
                          }
                        }
                      },
                      "description": "The specific appliance info of the storage pool"
                    },
                    "isManaged": {
                      "type": "string",
                      "description": "Indicates whether or not the pool is managed"
                    },
                    "lastRefreshTime": {
                      "type": "string",
                      "description": "Date and time when the resource was last refreshed"
                    },
                    "modified": {
                      "type": "string",
                      "description": "Date and time when the resource was last modified"
                    },
                    "name": {
                      "type": "string",
                      "description": "Display name for the resource"
                    },
                    "primaryKey": {
                      "type": "string",
                      "description": "A primaryKey field for search"
                    },
                    "requestingRefresh": {
                      "type": "boolean",
                      "description": "Used to request a refresh of the resource. Wirte-only field always returns null"
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the resource"
                    },
                    "status": {
                      "type": "string",
                      "description": "Overall health status of the resource. The following are the valid values for the status of the resource"
                    },
                    "storageFamily": {
                      "type": "string",
                      "description": "Family of the storage pool",
                      "enum": [
                        "StoreServ",
                        "StoreVirtual"
                      ]
                    },
                    "storageHostName": {
                      "type": "string",
                      "description": "IP or hostname of the storage pool"
                    },
                    "storageSystemName": {
                      "type": "string",
                      "description": "Name of the storage system in which the storage pool is present"
                    },
                    "storageSystemUri": {
                      "type": "string",
                      "description": "URI of the Storage system in which this storage pool is present"
                    },
                    "totalCapacity": {
                      "type": "string",
                      "description": "Total capacity of the storage pool in bytes"
                    },
                    "type": {
                      "type": "string",
                      "description": "Uniquely identifies the type of the JSON object"
                    },
                    "uri": {
                      "type": "string",
                      "description": "The canonical URI of the resource"
                    }
                  },
                  "example": {
                    "storageSystemUri": "/rest/storage-systems/99c561cd-dcaa-425d-82b8-a825006c524e",
                    "totalCapacity": 22410166272,
                    "freeCapacity": 20262682624,
                    "requestingRefresh": null,
                    "allocatedCapacity": 2147483648,
                    "deviceSpecificAttributes": {
                      "volumeCreationSpace": [
                        {
                          "availableSpace": 17223280230,
                          "replicationLevel": 1
                        },
                        {
                          "availableSpace": 10131341312,
                          "replicationLevel": 2
                        },
                        {
                          "availableSpace": 6754227541,
                          "replicationLevel": 3
                        },
                        {
                          "availableSpace": 5065670656,
                          "replicationLevel": 4
                        }
                      ]
                    },
                    "isManaged": true,
                    "name": "Cluster-3",
                    "description": null,
                    "category": "storage-pools",
                    "status": "OK",
                    "state": "Managed",
                    "type": "StoragePoolV3",
                    "uri": "/rest/storage-pools/d4711203-cade-4483-82b9-8c565c39ed86",
                    "eTag": "2/4",
                    "created": "2017-11-08T06:34:23.000Z",
                    "modified": "2017-11-08T06:49:19.000Z",
                    "lastRefreshTime": "2017-11-08T06:49:19.000Z",
                    "storageHostName": "172.18.30.3",
                    "storageSystemName": "Cluster-3",
                    "storageFamily": "StoreVirtual",
                    "primaryKey": "172.18.30.3-Cluster-3-storeVirtualPool",
                    "infoForSpecificAppliances": [
                      {
                        "appluri": "/rest/appliances/c1a089a0-3396-4fe4-a780-e40cc8e5798c",
                        "originalStorageSystemUri": "/rest/storage-systems/99c561cd-dcaa-425d-82b8-a825006c524e"
                      }
                    ],
                    "applOwners": [
                      {
                        "appluri": "/rest/appliances/c1a089a0-3396-4fe4-a780-e40cc8e5798c",
                        "applianceLocation": "172.1.1.11",
                        "applianceName": "ci-005056b3491b",
                        "originalUri": "/rest/storage-pools/E20D42AB-28FD-4331-A244-A825006C5298",
                        "originalStatus": "OK"
                      }
                    ],
                    "id": "d4711203-cade-4483-82b9-8c565c39ed86",
                    "groups": [
                      {
                        "name": "group1",
                        "uri": "/rest/groups/94f7fef6-8a33-472f-b5c3-0e5572e5d5d1"
                      },
                      {
                        "name": "group2",
                        "uri": "/rest/groups/5b46f5ef-0f6b-4a37-b0f2-ffcbfd8f690f"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/storage-systems": {
      "get": {
        "summary": "Returns storage-systems list",
        "description": "Returns storage-systems list by query.",
        "tags": [
          "Storage Systems"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/7"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "storage-systems"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1storage-systems~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/storage-systems/{id}": {
      "get": {
        "summary": "Returns a storage system",
        "description": "Returns an existing storage system identified by its unique ID.",
        "tags": [
          "Storage Systems"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of storage system.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1san-managers~1%7Bid%7D/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "allocatedCapacity": {
                      "type": "string",
                      "description": "Allocated capacity of the storage system in bytes"
                    },
                    "category": {
                      "type": "string",
                      "description": "Resource category used for authorizations and resource type groupings"
                    },
                    "created": {
                      "type": "string",
                      "description": "Date and time when the resource was created"
                    },
                    "credentials": {
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "User name for the storage system"
                        },
                        "password": {
                          "type": "string",
                          "description": "Password for the storage system"
                        }
                      },
                      "description": "Credentials of the storage system"
                    },
                    "description": {
                      "type": "string",
                      "description": "Brief description of the resource"
                    },
                    "deviceSpecificAttributes": {
                      "type": "object",
                      "properties": {
                        "storeServ properties": {
                          "type": "object",
                          "properties": {
                            "wwn": {
                              "type": "string",
                              "description": "The wwn of the storage system"
                            },
                            "model": {
                              "type": "string",
                              "description": "The model name of the storage system"
                            },
                            "firmware": {
                              "type": "string",
                              "description": "The firmware of the storage system"
                            },
                            "serialNumber": {
                              "type": "string",
                              "description": "The serialNumber of the storage system"
                            }
                          }
                        },
                        "storeVirtual properties": {
                          "type": "object",
                          "properties": {
                            "isMlptEnabled": {
                              "type": "boolean",
                              "description": "Flag to indicate if isMlptEnabled"
                            },
                            "mlptTargetIqn": {
                              "type": "string",
                              "description": "The mlptTargetIqn of the storage system"
                            },
                            "softwareVersion": {
                              "type": "string",
                              "description": "The software version of the storage system"
                            },
                            "supportedFeatures": {
                              "type": "string",
                              "description": "The supportedFeatures of the storage system"
                            },
                            "adaptiveOptimizationCapable": {
                              "type": "boolean",
                              "description": "Flag to indicate if adaptiveOptimizationCapable"
                            }
                          }
                        }
                      },
                      "description": "Properties specific to the storage system type for a port"
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Display name for the resource"
                    },
                    "eTag": {
                      "type": "string",
                      "description": "Entity tag/version ID of the resfinitionsource the same value that is returned in the ETag header on a GET of the resource"
                    },
                    "family": {
                      "type": "string",
                      "description": "Family of the storage system",
                      "enum": [
                        "StoreServ",
                        "StoreVirtual"
                      ]
                    },
                    "freeCapacity": {
                      "type": "string",
                      "description": "Free capacity of the storage system in bytes"
                    },
                    "hostname": {
                      "type": "string",
                      "description": "IP address or host name of the storage system"
                    },
                    "lastRefreshTime": {
                      "type": "string",
                      "description": "Date and time when the resource was last refreshed"
                    },
                    "modified": {
                      "type": "string",
                      "description": "Date and time when the resource was last modified"
                    },
                    "name": {
                      "type": "string",
                      "description": "Display name for the resource"
                    },
                    "primaryKey": {
                      "type": "string",
                      "description": "A primaryKey field for search"
                    },
                    "requestingRefresh": {
                      "type": "boolean",
                      "description": "Used to request a refresh of the resource. Write-only field always returns null"
                    },
                    "state": {
                      "type": "string",
                      "description": "Current state of the resource"
                    },
                    "status": {
                      "type": "string",
                      "description": "Overall health status of the resource."
                    },
                    "supportesFC": {
                      "type": "boolean",
                      "description": "Flag to indicate if the storage system supports the Fibre Channel and/or Fibre Channel over Ethernet transport"
                    },
                    "supportsIscsi": {
                      "type": "boolean",
                      "description": "Flag to indicate if the storage system supports the iSCSI transport"
                    },
                    "totalCapacity": {
                      "type": "string",
                      "description": "Total capacity of the storage system in bytes"
                    },
                    "type": {
                      "type": "string",
                      "description": "Uniquely identifies the type of the JSON object"
                    },
                    "uri": {
                      "type": "string",
                      "description": "The canonical URI of the resource"
                    }
                  }
                }
              ],
              "example": {
                "type": "StorageSystemV3",
                "credentials": {
                  "username": "dcs",
                  "password": "password"
                },
                "allocatedCapacity": 0,
                "freeCapacity": 98956046499840,
                "totalCapacity": 98956046499840,
                "description": "TXQ1000307",
                "status": "OK",
                "name": "ThreePAR7200-4506",
                "state": "Configured",
                "created": "2017-01-12T01:39:17.072Z",
                "eTag": "2017-01-12T01:40:27.206Z",
                "modified": "2017-01-12T01:40:27.206Z",
                "category": "storage-systems",
                "uri": "/rest/storage-systems/739fffca-83e0-4330-b8a0-1fb05906b78d",
                "primaryKey": "TXQ1000307",
                "hostname": "172.18.11.11",
                "family": "StoreServ",
                "deviceSpecificAttributes": {
                  "wwn": "20:00:00:02:AC:00:08:D5",
                  "serialNumber": "TXQ1000307",
                  "firmware": "3.2.1.292",
                  "model": "HP_3PAR 7200"
                },
                "applOwners": [
                  {
                    "appluri": "/rest/appliances/5d2240ae-fbb5-41fe-9751-16c25760d852",
                    "applianceLocation": "172.1.1.11",
                    "applianceName": "ci-005056b3524e",
                    "originalUri": "/rest/storage-systems/TXQ1000307",
                    "originalStatus": "OK"
                  }
                ],
                "displayName": null,
                "requestingRefresh": null,
                "supportsFC": false,
                "supportsIscsi": false,
                "lastRefreshTime": "2017-01-12T01:40:27.206Z",
                "id": "739fffca-83e0-4330-b8a0-1fb05906b78d",
                "groups": [
                  {
                    "name": "group1",
                    "uri": "/rest/groups/94f7fef6-8a33-472f-b5c3-0e5572e5d5d1"
                  },
                  {
                    "name": "group2",
                    "uri": "/rest/groups/5b46f5ef-0f6b-4a37-b0f2-ffcbfd8f690f"
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/storage-volumes": {
      "get": {
        "summary": "Returns storage-volumes list",
        "description": "Returns storage-volumes list by query.",
        "tags": [
          "Storage Volumes"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/9"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/4"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/8"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/7"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/6"
          },
          {
            "$ref": "#/paths/~1rest~1enclosures/get/parameters/7"
          }
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1enclosures/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "type": "string",
                      "description": "Resource category.",
                      "enum": [
                        "storage-volumes"
                      ]
                    },
                    "members": {
                      "type": "array",
                      "description": "List of resources.",
                      "items": {
                        "$ref": "#/paths/~1rest~1storage-volumes~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/storage-volumes/{id}": {
      "get": {
        "summary": "Returns a storage volume",
        "description": "Returns an existing storage volume identified by its unique ID.",
        "tags": [
          "Storage Volumes"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "name": "id",
            "description": "The UUID of storage volume.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/paths/~1rest~1san-managers~1%7Bid%7D/get/responses/200/schema/allOf/0"
                },
                {
                  "type": "object"
                }
              ],
              "properties": {
                "allocatedCapacity": {
                  "type": "string",
                  "description": "Capacity allocated in bytes."
                },
                "category": {
                  "type": "string",
                  "description": "Resource category used for authorizations and resource type groupings.",
                  "enum": [
                    "storage-volumes"
                  ]
                },
                "created": {
                  "type": "string",
                  "description": "Date and time when the resource was created."
                },
                "description": {
                  "type": "string",
                  "description": "Brief description of the resource."
                },
                "deviceSpecificAttributes": {
                  "type": "object",
                  "description": "Properties specific to the storage system type for a storage volume StoreServ Properties - snapshotPoolUri copyState\nStoreVirtual Properties - dataProtectionLevel isAdaptiveOptimizationEnabled id iqn numberOfReplicas\nPossible values for dataProtectionLevel - NetworkRaid0None NetworkRaid5SingleParity NetworkRaid10Mirror2Way NetworkRaid10Mirror3Way NetworkRaid10Mirror4Way NetworkRaid6DualParity"
                },
                "eTag": {
                  "type": "string",
                  "description": "Entity tag/version ID of the resource, the same value that is returned in the ETag header on a GET of the resource."
                },
                "infoForSpecificAppliances": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "appluri": {
                        "type": "string",
                        "description": "URI of the appliance."
                      },
                      "originalSnapshotPoolName": {
                        "type": "string",
                        "description": "Name of the original snapshot storage pool."
                      },
                      "originalSnapshotPoolUri": {
                        "type": "string",
                        "description": "URI of the original snapshot storage pool."
                      },
                      "originalStoragePoolName": {
                        "type": "string",
                        "description": "Name of the original storage pool."
                      },
                      "originalStoragePoolUri": {
                        "type": "string",
                        "description": "URI of the original storage pool."
                      },
                      "originalStorageSystemName": {
                        "type": "string",
                        "description": "Name of the original storage system."
                      },
                      "originalStorageSystemUri": {
                        "type": "string",
                        "description": "URI of the original storage system."
                      }
                    }
                  }
                },
                "isPermanent": {
                  "type": "string",
                  "description": "If true, indicates that the volume will persist when the profile using this volume is deleted. If false, then the volume will be deleted when the profile using this volume is deleted."
                },
                "isShareable": {
                  "type": "boolean",
                  "description": "Indicates whether or not the volume can be shared by multiple profiles."
                },
                "lastRefreshTime": {
                  "type": "string",
                  "description": "Date and time when the resource was last refreshed."
                },
                "lunWwn": {
                  "type": "string",
                  "description": "The WWN of the volume."
                },
                "modified": {
                  "type": "string",
                  "description": "Date and time when the resource was last modified."
                },
                "name": {
                  "type": "string",
                  "description": "Display name for the resource."
                },
                "primaryKey": {
                  "type": "string",
                  "description": "A primaryKey field for search."
                },
                "provisionedCapacity": {
                  "type": "string",
                  "description": "Total capacity of volume in bytes."
                },
                "provisioningType": {
                  "type": "string",
                  "description": "Provisioning type of the volume, e.g. Thin or Full."
                },
                "requestingRefresh": {
                  "type": "boolean",
                  "description": "Used to request a refresh of the resource Write-only field, always returns null. If setting this to true, no volume properties may be changed."
                },
                "revertToSnapshotUri": {
                  "type": "string",
                  "description": "To revert a volume to a snapshot, the user must set this attribute to the snapshot URI to which the volume has to be reverted."
                },
                "snapshotsUri": {
                  "type": "string",
                  "description": "URI of list of snapshots on this volume."
                },
                "state": {
                  "type": "string",
                  "description": "Current state of the resource.",
                  "enum": [
                    "AddFailed",
                    "Adding",
                    "Configured",
                    "Connected",
                    "Copying",
                    "CreateFailed",
                    "Creating",
                    "DeleteFailed",
                    "Deleting",
                    "Discovered",
                    "Managed",
                    "Normal",
                    "UpdateFailed",
                    "Updating"
                  ]
                },
                "status": {
                  "type": "string",
                  "description": "Overall health status of the resource.",
                  "enum": [
                    "Critical",
                    "Disabled",
                    "OK",
                    "Unknown",
                    "Warning"
                  ]
                },
                "templateConsistency": {
                  "type": "string",
                  "description": "Inconsistent - indicates that the volume is out of compliance with template. Consistent - indicates then the volume is in compliance with template."
                },
                "type": {
                  "type": "string",
                  "description": "Uniquely identifies the type of the JSON object."
                },
                "uri": {
                  "type": "string",
                  "description": "The canonical URI of the resource."
                },
                "volumeTemplateUri": {
                  "type": "string",
                  "description": "The URI of the template used to create this volume."
                }
              },
              "example": {
                "provisioningType": "Thin",
                "name": "volume02",
                "description": "",
                "isPermanent": true,
                "isShareable": false,
                "requestingRefresh": null,
                "allocatedCapacity": "2415919104",
                "provisionedCapacity": "10737418240",
                "lunWwn": "DC:95:99:92:68:00:10:10:30:71:50:10:93:42:89:83",
                "deviceSpecificAttributes": {
                  "copyState": "NotCopying",
                  "snapshotPoolUri": "/rest/storage-pools/5F69AB75-EB57-4FD8-BCA2-A7BC012DCE93"
                },
                "volumeTemplateUri": null,
                "revertToSnapshotUri": null,
                "templateConsistency": "Consistent",
                "snapshotsUri": "/rest/storage-volumes/8F429440-6B31-4DF5-AD8C-A7BC012F2CB1/snapshots",
                "category": "storage-volumes",
                "status": "OK",
                "state": "Managed",
                "type": "StorageVolumeV4",
                "uri": "/rest/storage-volumes/75b0ab48-8bdb-4caf-8824-0dafbd6c0df4",
                "eTag": "1/9778",
                "created": "2017-07-26T18:23:49.000Z",
                "modified": "2017-12-06T07:07:50.000Z",
                "lastRefreshTime": "2017-12-06T07:07:49.000Z",
                "primaryKey": "DC:95:99:92:68:00:10:10:30:71:50:10:93:42:89:83",
                "applOwners": [
                  {
                    "appluri": "/rest/appliances/736e8bd0-4a40-4b5c-a82a-47cbe921993c",
                    "applianceLocation": "172.1.1.11",
                    "applianceName": "ci-005056b3524e",
                    "originalUri": "/rest/storage-volumes/8F429440-6B31-4DF5-AD8C-A7BC012F2CB1",
                    "originalStatus": "OK"
                  }
                ],
                "infoForSpecificAppliances": [
                  {
                    "appluri": "/rest/appliances/736e8bd0-4a40-4b5c-a82a-47cbe921993c",
                    "originalStorageSystemUri": "/rest/storage-systems/TXQ1010307",
                    "originalStoragePoolUri": "/rest/storage-pools/5F69AB75-EB57-4FD8-BCA2-A7BC012DCE93",
                    "originalSnapshotPoolUri": "/rest/storage-pools/5F69AB75-EB57-4FD8-BCA2-A7BC012DCE93",
                    "originalStorageSystemName": "ThreePAR-2",
                    "originalStoragePoolName": "CPG-SSD-AO",
                    "originalSnapshotPoolName": "CPG-SSD-AO"
                  }
                ],
                "id": "75b0ab48-8bdb-4caf-8824-0dafbd6c0df4",
                "groups": []
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    },
    "/rest/tasks": {
      "get": {
        "summary": "Returns a list of tasks",
        "description": "Returns a list of tasks by query.\n",
        "tags": [
          "Tasks"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Accept-Language",
            "description": "The language code requested in the response.\nIf a suitable match to the requested language is not available, en-US or the appliance locale is used.\n",
            "in": "header",
            "required": false,
            "type": "string",
            "enum": [
              "en-US"
            ]
          },
          {
            "name": "auth",
            "description": "Session authorization token obtained from logging in.\nIf this header is not included or if the session-token is invalid, the response code will be 401 Unauthorized.\n",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-None-Match",
            "description": "The request is conditionally processed only if the current ETag for the resource\ndoes not match the ETag passed in this header.\nIf the ETag specified in this header matches the resource's current ETag,\nthe status code returned from the GET will be 304 Not Modified.\n",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "x-api-version",
            "description": "Specifies the version of the API to invoke.\nThe behavior of a given API version remains the same.\nIt is upward compatible from release to release.\nNew versions of an API are created when new features or changes are introduced.\nTo ensure expected behavior, always provide the x-api-version value.\n",
            "in": "header",
            "required": true,
            "type": "integer",
            "minimum": 2,
            "maximum": 2
          },
          {
            "name": "count",
            "description": "The number of resources to return. A count of -1 requests all the items up to the\nmaximum page size of 500.  The actual number of items in the response can differ\nfrom the requested count if the sum of start and count exceed the total number of items,\nor if returning the requested number of items would take too long.  If this field is\nomitted, it defaults to 25.\n",
            "in": "query",
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "fields",
            "description": "Specifies which fields should be returned in the result set.\n",
            "in": "query",
            "type": "string"
          },
          {
            "name": "filter",
            "description": "A general filter/query string to narrow the list of items returned.\nThe default is no filter - all resources are returned.\n\nFilter string format {attribute} {op} '{value}'\nExample\n  filter=\"name EQ 'resource1'\"\n  filter=name='resource1'\n  filter=\"status IN ('OK','WARNING','ERROR')\"\n  filter=\"applianceLocation EQ '10.10.0.1' AND status IN ('OK')\"\n",
            "in": "query",
            "type": "string"
          },
          {
            "name": "query",
            "description": "Query string used to filter results by resource attribute.\nQuery string format {attribute} {op} '{value}'\nExample\n  query=\"name EQ 'resource1'\"\n  query=name='resource1'\n  query=\"status IN ('OK','WARNING','ERROR')\"\n  query=\"applianceLocation EQ '10.10.0.1' AND status IN ('OK')\"\n",
            "in": "query",
            "type": "string"
          },
          {
            "name": "sort",
            "description": "The sort order of the returned data set. If no sort is specified the default sort is name:ascending, except for alerts resources where the default sort is created:descending.\nExample\n  sort=name:asc\n  sort=name:ascending\n  sort=name:desc\n  sort=name:descending\n",
            "in": "query",
            "type": "string"
          },
          {
            "name": "start",
            "description": "The first item to return, using 0-based indexing. If not specified, the default is 0 - start with the first available item.",
            "in": "query",
            "type": "integer",
            "default": 0,
            "minimum": 0
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "$ref": "#/paths/~1rest~1certificates~1servers/post/parameters/6/schema/allOf/0"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer",
                          "description": "The actual number of resources returned."
                        },
                        "nextPageUri": {
                          "type": "string",
                          "description": "URI pointing to the page of resources following the list of resources contained in the specified collection."
                        },
                        "prevPageUri": {
                          "type": "string",
                          "description": "URI pointing to the page of resources preceding the list of resources contained in the specified collection."
                        },
                        "start": {
                          "type": "integer",
                          "description": "The row or record number of the first resource returned in the specified page."
                        },
                        "total": {
                          "type": "integer",
                          "description": "The total number of resources that would be returned from the query (including any filters),\nwithout pagination or enforced resource limits.\n"
                        }
                      }
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "category": {
                      "enum": [
                        "tasks"
                      ]
                    },
                    "type": {
                      "enum": [
                        "TaskResourcePaginatedCollectionV2"
                      ]
                    },
                    "members": {
                      "description": "Ordered list of tasks returned from the query",
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1rest~1tasks~1%7Bid%7D/get/responses/200/schema"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/paths/~1rest~1tasks/get/responses/401/schema"
            },
            "examples": {
              "application/json": {
                "errorCode": "MISSING_X_API_VERSION_HEADER",
                "message": "Missing 'x-api-version' header.",
                "recommendedActions": [
                  "Please provide the missing 'x-api-version' header value and resend the request."
                ],
                "details": "Missing 'x-api-version' header from the request.",
                "errorSource": null,
                "nestedErrors": [],
                "data": [],
                "canForce": false
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "errorCode": {
                  "type": "integer",
                  "description": "An opaque string uniquely identifying the error for programmatic use."
                },
                "message": {
                  "type": "string",
                  "description": "Clear and concise description of the error condition, suitable for display to an end user."
                },
                "recommendedActions": {
                  "type": "string",
                  "description": "Steps that an end user can perform to correct the error condition."
                },
                "details": {
                  "type": "string",
                  "description": "Optional verbose description of the error condition, suitable for display to an end user."
                },
                "errorSource": {
                  "type": "string",
                  "description": "Identifies some element of the request that caused the error, e.g. a specific form field or a specific resource."
                },
                "nestedErrors": {
                  "type": "string",
                  "description": "List of subsidiary errors that led to this error condition, each of which is a nested set of these same attributes."
                },
                "data": {
                  "type": "string",
                  "description": "The arbitrary data associated with the error condition, for programmatic use."
                },
                "canForce": {
                  "type": "boolean",
                  "description": "A Boolean indicating whether this error condition can be ignored by re-sending the request with the force=true."
                }
              },
              "required": [
                "errorCode",
                "message",
                "recommendedActions"
              ]
            },
            "examples": {
              "application/json": {
                "errorCode": "INVALID_AUTH_TOKEN",
                "message": "Authorization error: Invalid authentication token.",
                "recommendedActions": [
                  "Please verify your credentials and re-authenticate before attempting the operation again."
                ],
                "details": "The token provided in the 'auth' header is invalid.",
                "errorSource": null,
                "nestedErrors": [],
                "data": [],
                "canForce": false
              }
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/paths/~1rest~1tasks/get/responses/401/schema"
            },
            "examples": {
              "application/json": {
                "errorCode": "INVALID_API_VERSION",
                "message": "The API version information is absent or invalid.",
                "recommendedActions": [
                  "Refer to the API specification to determine the supported API versions."
                ],
                "details": "The request did not contain a valid 'x-api-version' header.",
                "errorSource": null,
                "nestedErrors": [],
                "data": [],
                "canForce": false
              }
            }
          }
        }
      }
    },
    "/rest/tasks/{id}": {
      "get": {
        "summary": "Returns a task",
        "description": "Returns a task",
        "tags": [
          "Tasks"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/0"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/1"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/2"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/3"
          },
          {
            "$ref": "#/paths/~1rest~1tasks/get/parameters/5"
          },
          {
            "name": "id",
            "description": "The UUID of task.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "associatedResource": {
                  "type": "object",
                  "properties": {
                    "associationType": {
                      "type": "string",
                      "enum": [
                        "HAS_A",
                        "IS_A",
                        "MANAGED_BY"
                      ],
                      "description": "Type of association. In general, Task uses MANAGED_BY\nassociationType, as task is managed by some resource.\n"
                    },
                    "resourceCategory": {
                      "type": "string",
                      "description": "Category of the resource associated with the task (for\nexample, 'enclosures'), not necessarily the RM performing\nthe task.\n"
                    },
                    "resourceName": {
                      "type": "string",
                      "description": "Display name of the resource associated with the task."
                    },
                    "resourceUri": {
                      "type": "string",
                      "description": "URI of the resource associated with the task."
                    }
                  }
                },
                "associatedTaskURI": {
                  "type": "string",
                  "description": "If the current task is associated with another task, this\nrepresents the URI of another task. And if the current task\nis not associated with any other task, it signifies with NULL.\n"
                },
                "category": {
                  "type": "string",
                  "description": "The category is used to help identify the kind of resource.\nThe category of this resource will always be set to \"tasks\".\n",
                  "enum": [
                    "tasks"
                  ]
                },
                "completedSteps": {
                  "type": "integer",
                  "description": "Number of steps currently completed by the task."
                },
                "computedPercentComplete": {
                  "type": "integer",
                  "description": "Percent complete computed taking into account both percent\ncomplete and expected duration of the task\n"
                },
                "created": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time when the appliance was created."
                },
                "data": {
                  "type": "object",
                  "description": "A map of string-values containing extra/internal data defined\nfor the particular task, usually for internal use\n"
                },
                "eTag": {
                  "type": "string",
                  "description": "Entity tag/version ID of the resource, the same value that is\nreturned in the ETag header on a GET of the resource\n"
                },
                "expectedDuration": {
                  "type": "integer",
                  "description": "Estimated number of seconds that the task is expected to take\nto complete\n"
                },
                "hidden": {
                  "type": "boolean",
                  "description": "Boolean field indicating if the task is hidden or visible.\nDefault is false.\nenum:\n  - true\n  - false\n"
                },
                "modified": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date when the resource was last modified"
                },
                "name": {
                  "type": "string",
                  "description": "Display name for the task.",
                  "minLength": 1,
                  "maxLength": 255
                },
                "owner": {
                  "type": "string",
                  "description": "The name of the user under whose authority the task is running\n",
                  "maxLength": 255
                },
                "parentTaskUri": {
                  "type": "string",
                  "description": "URI of the parent task. NULL if no parent exists."
                },
                "percentComplete": {
                  "type": "integer",
                  "description": "Percentage of task currently completed. If TaskState\nof this task currently belongs to any of the TERMINAL states\n(Terminated, Killed, Completed, Error, or Warning), percentComplete\nand computedPercentComplete will be set to 100.\n"
                },
                "progressUpdates": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Task progress object identifier"
                      },
                      "statusUpdate": {
                        "type": "string",
                        "description": "Text containing update that the service logged during\nexecution of the task\n"
                      },
                      "timestamp": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date and time when the progress update was logged"
                      }
                    }
                  }
                },
                "stateReason": {
                  "type": "string",
                  "description": "Contains the reason for changing to current state of the task"
                },
                "taskErrors": {
                  "type": "array",
                  "description": "Error messages associated with the task",
                  "items": {
                    "type": "object",
                    "properties": {
                      "data": {
                        "type": "object",
                        "description": "Contains extra data defined for the particular error"
                      },
                      "details": {
                        "type": "string",
                        "description": "Optional verbose description of the error with additional information"
                      },
                      "errorCode": {
                        "type": "string",
                        "description": "A string code which uniquely identifies the specific error allowing\nclients to switch on specific errors without having to parse the error message\n"
                      },
                      "errorSource": {
                        "type": "string",
                        "description": "A reference to the resource or attribute that applies to an error"
                      },
                      "message": {
                        "type": "string",
                        "description": "Description of the error condition"
                      },
                      "nestedErrors": {
                        "type": "array",
                        "description": "An array of task errors used when there are multiple errors",
                        "items": {
                          "type": "object"
                        }
                      },
                      "recommendedActions": {
                        "type": "array",
                        "description": "A description of what can be done to rectify the problem",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "taskOutput": {
                  "type": "array",
                  "description": "Output resulting from the running of the task",
                  "items": {
                    "type": "string"
                  }
                },
                "taskState": {
                  "type": "string",
                  "description": "Current state of the task",
                  "enum": [
                    "Completed",
                    "Error",
                    "Interrupted",
                    "Killed",
                    "New",
                    "Pending",
                    "Running",
                    "Starting",
                    "Stopping",
                    "Suspended",
                    "Terminated",
                    "Unknown",
                    "Warning"
                  ]
                },
                "taskStatus": {
                  "type": "string",
                  "description": "Short summary of the current execution/completion status",
                  "minLength": 0,
                  "maxLength": 255
                },
                "taskType": {
                  "type": "string",
                  "enum": [
                    "Appliance",
                    "Background",
                    "User"
                  ]
                },
                "totalSteps": {
                  "type": "integer",
                  "description": "Total number of steps to be completed for this task"
                },
                "type": {
                  "type": "string",
                  "description": "Uniquely identifies the type of the JSON object.",
                  "enum": [
                    "TaskResourceV2"
                  ]
                },
                "uri": {
                  "type": "string",
                  "description": "The canonical URI of the resource"
                },
                "userInitiated": {
                  "type": "boolean",
                  "description": "If the task is the result of a user initiated command it is TRUE.\nOtherwise it is FALSE.\n"
                }
              }
            }
          },
          "400": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/400"
          },
          "401": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/401"
          },
          "404": {
            "$ref": "#/paths/~1rest~1enclosures/get/responses/404"
          },
          "412": {
            "$ref": "#/paths/~1rest~1tasks/get/responses/412"
          }
        }
      }
    }
  }
}
